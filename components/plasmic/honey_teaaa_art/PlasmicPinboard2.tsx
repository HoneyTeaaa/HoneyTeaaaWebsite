/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pqbSBZb9VG36A9gA4GgWPg
// Component: My_K85wr1wJ2

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import SocialsPolaroid from "../../SocialsPolaroid"; // plasmic-import: lhueAMWT6GZY/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../liz_website/plasmic.module.css"; // plasmic-import: pqbSBZb9VG36A9gA4GgWPg/projectcss
import sty from "./PlasmicPinboard2.module.css"; // plasmic-import: My_K85wr1wJ2/css

createPlasmicElementProxy;

export type PlasmicPinboard2__VariantMembers = {
  projectType: "fIlm" | "unity" | "vrChat" | "blender";
};
export type PlasmicPinboard2__VariantsArgs = {
  projectType?: MultiChoiceArg<"fIlm" | "unity" | "vrChat" | "blender">;
};
type VariantPropType = keyof PlasmicPinboard2__VariantsArgs;
export const PlasmicPinboard2__VariantProps = new Array<VariantPropType>(
  "projectType"
);

export type PlasmicPinboard2__ArgsType = {};
type ArgPropType = keyof PlasmicPinboard2__ArgsType;
export const PlasmicPinboard2__ArgProps = new Array<ArgPropType>();

export type PlasmicPinboard2__OverridesType = {
  pinboard?: Flex__<"div">;
};

export interface DefaultPinboard2Props {
  projectType?: MultiChoiceArg<"fIlm" | "unity" | "vrChat" | "blender">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPinboard2__RenderFunc(props: {
  variants: PlasmicPinboard2__VariantsArgs;
  args: PlasmicPinboard2__ArgsType;
  overrides: PlasmicPinboard2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "projectType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.projectType
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"pinboard"}
      data-plasmic-override={overrides.pinboard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.pinboard,
        {
          [sty.pinboardprojectType_blender]: hasVariant(
            $state,
            "projectType",
            "blender"
          ),
          [sty.pinboardprojectType_unity]: hasVariant(
            $state,
            "projectType",
            "unity"
          ),
          [sty.pinboardprojectType_vrChat]: hasVariant(
            $state,
            "projectType",
            "vrChat"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.columns__o5NPn, {
          [sty.columnsprojectType_unity__o5NPn1Ix6U]: hasVariant(
            $state,
            "projectType",
            "unity"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.column___8WtO6)}>
          <SocialsPolaroid
            backHeader1={``}
            className={classNames(
              "__wab_instance",
              sty.socialsPolaroid___71Qvj
            )}
            date2={``}
            infoPage={"https://bsky.app/profile/honeyteaaa.art"}
            projectTitle={"Bluesky"}
            slot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4XyUu
                )}
              >
                {"I mainly post photos here"}
              </div>
            }
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__pxpmJ)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/dc589Be88A545761152E5D2D632B0261Jpg.jpg",
                fullWidth: 400,
                fullHeight: 600,
                aspectRatio: undefined
              }}
            />
          </SocialsPolaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__oHr6K)}>
          <SocialsPolaroid
            backHeader1={"TikTok Link   \u2193"}
            className={classNames(
              "__wab_instance",
              sty.socialsPolaroid___45Xmq
            )}
            date2={``}
            infoPage={"https://www.tiktok.com/@honey.teaaa_"}
            projectTitle={"TikTok"}
            slot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9Qzo
                )}
              >
                {"I post short form content here"}
              </div>
            }
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__baMcv)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/dc589Be88A545761152E5D2D632B0261Jpg.jpg",
                fullWidth: 400,
                fullHeight: 600,
                aspectRatio: undefined
              }}
            />
          </SocialsPolaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__m6U2H)}>
          <SocialsPolaroid
            backHeader1={"YouTube Link   \u2193"}
            className={classNames("__wab_instance", sty.socialsPolaroid__ed1Ki)}
            date2={``}
            infoPage={"https://www.youtube.com/@honeyteaaaa"}
            projectTitle={"YouTube"}
            slot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wN40R
                )}
              >
                {
                  "I post any long form content I make here. I do not post here often."
                }
              </div>
            }
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__ya8Dh)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/dc589Be88A545761152E5D2D632B0261Jpg.jpg",
                fullWidth: 400,
                fullHeight: 600,
                aspectRatio: undefined
              }}
            />
          </SocialsPolaroid>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.columns__amp3V)}>
        <div className={classNames(projectcss.all, sty.column__q34Ez)}>
          <SocialsPolaroid
            backHeader1={"Instagram Link   \u2193"}
            className={classNames("__wab_instance", sty.socialsPolaroid__qOttr)}
            date2={``}
            infoPage={"https://www.instagram.com/honeyteaaaaaaaa/"}
            projectTitle={"Instagram"}
            slot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___56HPx
                )}
              >
                {"I post about balisongs on Instagram almost exclusively"}
              </div>
            }
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__dsMXi)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/dc589Be88A545761152E5D2D632B0261Jpg.jpg",
                fullWidth: 400,
                fullHeight: 600,
                aspectRatio: undefined
              }}
            />
          </SocialsPolaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__uTaX1)}>
          <SocialsPolaroid
            backHeader1={"VRC Group Link   \u2193"}
            className={classNames("__wab_instance", sty.socialsPolaroid__mkEh2)}
            date2={``}
            infoPage={
              "https://vrchat.com/home/group/grp_50eb80e9-8899-423e-b6e5-d18b6669e73e"
            }
            projectTitle={"VRChat Group"}
            slot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wrXQh
                )}
              >
                {"I mainly post photos here"}
              </div>
            }
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__hjqDx)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/dc589Be88A545761152E5D2D632B0261Jpg.jpg",
                fullWidth: 400,
                fullHeight: 600,
                aspectRatio: undefined
              }}
            />
          </SocialsPolaroid>
        </div>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  pinboard: ["pinboard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  pinboard: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPinboard2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPinboard2__VariantsArgs;
    args?: PlasmicPinboard2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPinboard2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPinboard2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPinboard2__ArgProps,
          internalVariantPropNames: PlasmicPinboard2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPinboard2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "pinboard") {
    func.displayName = "PlasmicPinboard2";
  } else {
    func.displayName = `PlasmicPinboard2.${nodeName}`;
  }
  return func;
}

export const PlasmicPinboard2 = Object.assign(
  // Top-level PlasmicPinboard2 renders the root element
  makeNodeComponent("pinboard"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicPinboard2
    internalVariantProps: PlasmicPinboard2__VariantProps,
    internalArgProps: PlasmicPinboard2__ArgProps
  }
);

export default PlasmicPinboard2;
/* prettier-ignore-end */
