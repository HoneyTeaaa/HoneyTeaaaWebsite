// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pqbSBZb9VG36A9gA4GgWPg
// Component: YZNtPwXJ6VsS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: tGuDlEY_p2-T/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import SocialButton from "../../SocialButton"; // plasmic-import: mVglz-2PPnwm/component
import YouTube from "@plasmicpkgs/react-youtube";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariants_2JO3KfG3GnTq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2jO3kfG3gnTq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: pqbSBZb9VG36A9gA4GgWPg/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: YZNtPwXJ6VsS/css

import InstagramSvgIcon from "./icons/PlasmicIcon__InstagramSvg"; // plasmic-import: SHrMv3TaeaGv/icon
import BlueskyLogoSvgIcon from "./icons/PlasmicIcon__BlueskyLogoSvg"; // plasmic-import: FOXR5d_qZeG1/icon
import STikTok18ND2XSvgIcon from "./icons/PlasmicIcon__STikTok18ND2XSvg"; // plasmic-import: etfjn81rVY-k/icon
import YoutubeSvgIcon from "./icons/PlasmicIcon__YoutubeSvg"; // plasmic-import: o3oTJJ1QlA-2/icon
import Asset1VrcSvgIcon from "./icons/PlasmicIcon__Asset1VrcSvg"; // plasmic-import: B9HQ4rVr7o7_/icon

createPlasmicElementProxy;

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  reveal?: Flex__<typeof Reveal>;
  ul?: Flex__<"ul">;
  li?: Flex__<"li">;
  youTube?: Flex__<typeof YouTube>;
};

export interface DefaultHomeProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2JO3KfG3GnTq()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <Navbar
          data-plasmic-name={"navbar"}
          data-plasmic-override={overrides.navbar}
          className={classNames("__wab_instance", sty.navbar)}
        />

        <Reveal
          data-plasmic-name={"reveal"}
          data-plasmic-override={overrides.reveal}
          cascade={false}
          className={classNames("__wab_instance", sty.reveal)}
          reverse={false}
          triggerOnce={true}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns___8IigZ)}
          >
            <div className={classNames(projectcss.all, sty.column__ovEmX)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__f3Xma)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___4FmV)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liz_website/images/fallLizPictureJpg.jpg",
                    fullWidth: 2592,
                    fullHeight: 1456,
                    aspectRatio: undefined
                  }}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lLnm
                  )}
                >
                  {
                    "I'm Tea, a multidisciplinary digital artist and full time college student. I make art in Blender, VRChat Avatars and games in Unity Engine, and love to learn new software."
                  }
                </div>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.column__kbG1O)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__os12O)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__arjHu)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__b1Iuu
                    )}
                  >
                    {"Latest Update"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tbG8D
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"1/8/2025\n"}</React.Fragment>
                      {
                        <ul
                          data-plasmic-name={"ul"}
                          data-plasmic-override={overrides.ul}
                          className={classNames(
                            projectcss.all,
                            projectcss.ul,
                            sty.ul
                          )}
                        >
                          <li
                            data-plasmic-name={"li"}
                            data-plasmic-override={overrides.li}
                            className={classNames(
                              projectcss.all,
                              projectcss.li,
                              projectcss.__wab_text,
                              sty.li
                            )}
                          >
                            {"New site layout!"}
                          </li>
                        </ul>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rUvu3)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lprA3
                    )}
                  >
                    {"Socials"}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___7I8Uj)}
                  >
                    <SocialButton
                      className={classNames(
                        "__wab_instance",
                        sty.socialButton__rYspe
                      )}
                      linkUrl={"https://www.instagram.com/honeyteaaaaaaaa/"}
                    >
                      <InstagramSvgIcon
                        className={classNames(projectcss.all, sty.svg___85MY)}
                        role={"img"}
                      />
                    </SocialButton>
                    <SocialButton
                      className={classNames(
                        "__wab_instance",
                        sty.socialButton__tYaJ
                      )}
                      linkUrl={"https://bsky.app/profile/honeyteaaa.art"}
                    >
                      <BlueskyLogoSvgIcon
                        className={classNames(projectcss.all, sty.svg__a53Wt)}
                        role={"img"}
                      />
                    </SocialButton>
                    <SocialButton
                      className={classNames(
                        "__wab_instance",
                        sty.socialButton__nqBwO
                      )}
                      linkUrl={"https://www.tiktok.com/@honey.teaaa_"}
                    >
                      <STikTok18ND2XSvgIcon
                        className={classNames(projectcss.all, sty.svg___1AonZ)}
                        role={"img"}
                      />
                    </SocialButton>
                    <SocialButton
                      className={classNames(
                        "__wab_instance",
                        sty.socialButton__lnVc5
                      )}
                      linkUrl={"https://www.youtube.com/@honeyteaaaa"}
                    >
                      <YoutubeSvgIcon
                        className={classNames(projectcss.all, sty.svg__uv1W)}
                        role={"img"}
                      />
                    </SocialButton>
                    <SocialButton
                      className={classNames(
                        "__wab_instance",
                        sty.socialButton__ooR1
                      )}
                      linkUrl={
                        "https://vrchat.com/home/group/grp_50eb80e9-8899-423e-b6e5-d18b6669e73e"
                      }
                    >
                      <Asset1VrcSvgIcon
                        className={classNames(projectcss.all, sty.svg__ttBmh)}
                        role={"img"}
                      />
                    </SocialButton>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hiFz)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oZp7J
                    )}
                  >
                    {"Current Project"}
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__rqCxv)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liz_website/images/image8.png",
                      fullWidth: 1668,
                      fullHeight: 2420,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___01SXj
                    )}
                  >
                    {"Teasona"}
                  </div>
                </Stack__>
              </Stack__>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__f9Fio)}
          >
            <YouTube
              data-plasmic-name={"youTube"}
              data-plasmic-override={overrides.youTube}
              className={classNames("__wab_instance", sty.youTube)}
              videoId={"DLiNRjd395w"}
            />
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.columns__nLuTe)}
          >
            <div className={classNames(projectcss.all, sty.column___0HqXo)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__h5LKi)}
              >
                <Embed
                  className={classNames("__wab_instance", sty.embedHtml__wa2W)}
                  code={
                    '<script src="https://disuko.neocities.org/ring.js"></script>'
                  }
                />
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.column__ds9NL)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kxJc4)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pmdRz)}
                />

                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lyGEt)}
                >
                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__vEbPw
                    )}
                    code={
                      '<iframe style="border-radius:12px" src="https://open.spotify.com/embed/playlist/0Jcnu4dG3Tk60sAzxF1VGJ?utm_source=generator" width="100%" height="352" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>'
                    }
                  />
                </Stack__>
              </Stack__>
            </div>
          </Stack__>
        </Reveal>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "reveal", "ul", "li", "youTube"],
  navbar: ["navbar"],
  reveal: ["reveal", "ul", "li", "youTube"],
  ul: ["ul", "li"],
  li: ["li"],
  youTube: ["youTube"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  reveal: typeof Reveal;
  ul: "ul";
  li: "li";
  youTube: typeof YouTube;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    reveal: makeNodeComponent("reveal"),
    ul: makeNodeComponent("ul"),
    li: makeNodeComponent("li"),
    youTube: makeNodeComponent("youTube"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
