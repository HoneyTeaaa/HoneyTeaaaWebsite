/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pqbSBZb9VG36A9gA4GgWPg
// Component: mGYignknmvRA

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: tGuDlEY_p2-T/component
import YouTube from "@plasmicpkgs/react-youtube";
import ChunkyButton from "../../ChunkyButton"; // plasmic-import: afhvlQtgWcWV/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: pqbSBZb9VG36A9gA4GgWPg/projectcss
import sty from "./PlasmicMoreInfoPieceAShit.module.css"; // plasmic-import: mGYignknmvRA/css

createPlasmicElementProxy;

export type PlasmicMoreInfoPieceAShit__VariantMembers = {};
export type PlasmicMoreInfoPieceAShit__VariantsArgs = {};
type VariantPropType = keyof PlasmicMoreInfoPieceAShit__VariantsArgs;
export const PlasmicMoreInfoPieceAShit__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMoreInfoPieceAShit__ArgsType = {};
type ArgPropType = keyof PlasmicMoreInfoPieceAShit__ArgsType;
export const PlasmicMoreInfoPieceAShit__ArgProps = new Array<ArgPropType>();

export type PlasmicMoreInfoPieceAShit__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  columns?: Flex__<"div">;
  column?: Flex__<"div">;
  youTube?: Flex__<typeof YouTube>;
  chunkyButton?: Flex__<typeof ChunkyButton>;
};

export interface DefaultMoreInfoPieceAShitProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMoreInfoPieceAShit__RenderFunc(props: {
  variants: PlasmicMoreInfoPieceAShit__VariantsArgs;
  args: PlasmicMoreInfoPieceAShit__ArgsType;
  overrides: PlasmicMoreInfoPieceAShit__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <Navbar
          data-plasmic-name={"navbar"}
          data-plasmic-override={overrides.navbar}
          className={classNames("__wab_instance", sty.navbar)}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__icDMr)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__gpyjQ
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Asset Credits"}
              </span>
            </React.Fragment>
          </div>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__q4Fr1
            )}
            component={Link}
            platform={"nextjs"}
          >
            {"Piece a Shit more info page i swear"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__rz9Dw
            )}
            component={Link}
            platform={"nextjs"}
          >
            {""}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__ajVf6
            )}
            component={Link}
            platform={"nextjs"}
          >
            {""}
          </PlasmicLink__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__l9Rs1)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__iZyTp)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wSbjz
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Showcase Photos"}
                </span>
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div
                data-plasmic-name={"column"}
                data-plasmic-override={overrides.column}
                className={classNames(projectcss.all, sty.column)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__qi6Ky)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__v04Pn)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"500px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liz_website/images/image18.jpg",
                      fullWidth: 3000,
                      fullHeight: 4000,
                      aspectRatio: undefined
                    }}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__b4NGh)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__jtk9)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"574px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/liz_website/images/screenshot20250225164249Png.png",
                        fullWidth: 1585,
                        fullHeight: 802,
                        aspectRatio: undefined
                      }}
                    />

                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__yYwGz)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/liz_website/images/image19.png",
                        fullWidth: 1616,
                        fullHeight: 863,
                        aspectRatio: undefined
                      }}
                    />
                  </Stack__>
                </div>
                <YouTube
                  data-plasmic-name={"youTube"}
                  data-plasmic-override={overrides.youTube}
                  className={classNames("__wab_instance", sty.youTube)}
                  videoId={"1pvnhRoJG7E"}
                />
              </div>
            </div>
          </Stack__>
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox___1Due)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__su9Hw
            )}
            component={Link}
            href={`/portfolio`}
            platform={"nextjs"}
          >
            <ChunkyButton
              data-plasmic-name={"chunkyButton"}
              data-plasmic-override={overrides.chunkyButton}
              className={classNames("__wab_instance", sty.chunkyButton)}
              text={"Back to Portfolio"}
            />
          </PlasmicLink__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "columns", "column", "youTube", "chunkyButton"],
  navbar: ["navbar"],
  columns: ["columns", "column", "youTube"],
  column: ["column", "youTube"],
  youTube: ["youTube"],
  chunkyButton: ["chunkyButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  columns: "div";
  column: "div";
  youTube: typeof YouTube;
  chunkyButton: typeof ChunkyButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMoreInfoPieceAShit__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMoreInfoPieceAShit__VariantsArgs;
    args?: PlasmicMoreInfoPieceAShit__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMoreInfoPieceAShit__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMoreInfoPieceAShit__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMoreInfoPieceAShit__ArgProps,
          internalVariantPropNames: PlasmicMoreInfoPieceAShit__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMoreInfoPieceAShit__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMoreInfoPieceAShit";
  } else {
    func.displayName = `PlasmicMoreInfoPieceAShit.${nodeName}`;
  }
  return func;
}

export const PlasmicMoreInfoPieceAShit = Object.assign(
  // Top-level PlasmicMoreInfoPieceAShit renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    youTube: makeNodeComponent("youTube"),
    chunkyButton: makeNodeComponent("chunkyButton"),

    // Metadata about props expected for PlasmicMoreInfoPieceAShit
    internalVariantProps: PlasmicMoreInfoPieceAShit__VariantProps,
    internalArgProps: PlasmicMoreInfoPieceAShit__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMoreInfoPieceAShit;
/* prettier-ignore-end */
