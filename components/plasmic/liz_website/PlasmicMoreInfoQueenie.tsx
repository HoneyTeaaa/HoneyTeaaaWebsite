/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pqbSBZb9VG36A9gA4GgWPg
// Component: LGxavWnqUsHr

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: tGuDlEY_p2-T/component
import ChunkyButton from "../../ChunkyButton"; // plasmic-import: afhvlQtgWcWV/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: pqbSBZb9VG36A9gA4GgWPg/projectcss
import sty from "./PlasmicMoreInfoQueenie.module.css"; // plasmic-import: LGxavWnqUsHr/css

createPlasmicElementProxy;

export type PlasmicMoreInfoQueenie__VariantMembers = {};
export type PlasmicMoreInfoQueenie__VariantsArgs = {};
type VariantPropType = keyof PlasmicMoreInfoQueenie__VariantsArgs;
export const PlasmicMoreInfoQueenie__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMoreInfoQueenie__ArgsType = {};
type ArgPropType = keyof PlasmicMoreInfoQueenie__ArgsType;
export const PlasmicMoreInfoQueenie__ArgProps = new Array<ArgPropType>();

export type PlasmicMoreInfoQueenie__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  columns?: Flex__<"div">;
  sliderCarousel2?: Flex__<typeof SliderWrapper>;
};

export interface DefaultMoreInfoQueenieProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMoreInfoQueenie__RenderFunc(props: {
  variants: PlasmicMoreInfoQueenie__VariantsArgs;
  args: PlasmicMoreInfoQueenie__ArgsType;
  overrides: PlasmicMoreInfoQueenie__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel2.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel2",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <Navbar
          data-plasmic-name={"navbar"}
          data-plasmic-override={overrides.navbar}
          className={classNames("__wab_instance", sty.navbar)}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___3GJ8H)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__w9OG
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Asset Credits"}
              </span>
            </React.Fragment>
          </div>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__va0Ns
            )}
            component={Link}
            platform={"nextjs"}
          >
            {"Base Model . the.time.guardian"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__wXwM4
            )}
            component={Link}
            platform={"nextjs"}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__slbJv
                  )}
                  component={Link}
                  href={
                    "https://novaicnight.gumroad.com/l/MonsterBundle?layout=profile&recommended_by=search"
                  }
                  platform={"nextjs"}
                >
                  {"Wings and Tail .  NovaicNight"}
                </PlasmicLink__>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__nryVr
            )}
            component={Link}
            platform={"nextjs"}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__wDe2H
                  )}
                  component={Link}
                  href={"https://aidenart.gumroad.com/l/fwZkp?layout=profile"}
                  platform={"nextjs"}
                >
                  {"Hair . AidenFur"}
                </PlasmicLink__>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </PlasmicLink__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___5Q2H6)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__yb4Hb)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__be2Oo
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Showcase Photos"}
                </span>
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__l2Md1)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__sLfOr)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSliderCarouselCurrentSlide"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["sliderCarousel2", "currentSlide"]
                            },
                            operation: 3
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, oldValue - 1);
                            return oldValue - 1;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSliderCarouselCurrentSlide"] != null &&
                      typeof $steps["updateSliderCarouselCurrentSlide"] ===
                        "object" &&
                      typeof $steps["updateSliderCarouselCurrentSlide"].then ===
                        "function"
                    ) {
                      $steps["updateSliderCarouselCurrentSlide"] = await $steps[
                        "updateSliderCarouselCurrentSlide"
                      ];
                    }
                  }}
                >
                  <ChunkyButton
                    className={classNames(
                      "__wab_instance",
                      sty.chunkyButton__mdYq5
                    )}
                    text={"<"}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__ya2Ru)}>
                {(() => {
                  const child$Props = {
                    arrowColor: true ? "#331009" : undefined,
                    arrows: false,
                    autoplay: false,
                    autoplaySpeed: 0,
                    beforeChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "currentSlide",
                        ["sliderCarousel2", "currentSlide"],
                        SliderWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    centerMode: false,
                    className: classNames(
                      "__wab_instance",
                      sty.sliderCarousel2
                    ),
                    cssEase: "ease-in-out",
                    dots: false,
                    fade: true,
                    initialSlide: generateStateValueProp($state, [
                      "sliderCarousel2",
                      "currentSlide"
                    ]),
                    ref: ref => {
                      $refs["sliderCarousel2"] = ref;
                    },
                    sliderScopeClassName: sty["sliderCarousel2__slider"],
                    speed: 250,
                    useCSS: true,
                    vertical: false
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentSlide",
                        plasmicStateName: "sliderCarousel2.currentSlide"
                      }
                    ],
                    [],
                    SliderWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <SliderWrapper
                      data-plasmic-name={"sliderCarousel2"}
                      data-plasmic-override={overrides.sliderCarousel2}
                      {...child$Props}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gh0Lh
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__nn5U1)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"33%"}
                          src={{
                            src: "/plasmic/liz_website/images/vrChat202407061158326442560X1440Png.png",
                            fullWidth: 1440,
                            fullHeight: 2560,
                            aspectRatio: undefined
                          }}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__rr3Ji)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"33%"}
                          src={{
                            src: "/plasmic/liz_website/images/vrChat202407061202389712560X1440Png.png",
                            fullWidth: 1440,
                            fullHeight: 2560,
                            aspectRatio: undefined
                          }}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__io3X1)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"33%"}
                          src={{
                            src: "/plasmic/liz_website/images/vrChat202407061205498232560X1440Png.png",
                            fullWidth: 1440,
                            fullHeight: 2560,
                            aspectRatio: undefined
                          }}
                        />
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1Xy2P
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__vsFm)}
                          displayHeight={"100%"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={{
                            src: "/plasmic/liz_website/images/vrChat20230521144825Png.png",
                            fullWidth: 719,
                            fullHeight: 404,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </SliderWrapper>
                  );
                })()}
              </div>
              <div className={classNames(projectcss.all, sty.column___1Nna)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__sVwd5)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSliderCarouselCurrentSlide"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["sliderCarousel2", "currentSlide"]
                            },
                            operation: 2
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, oldValue + 1);
                            return oldValue + 1;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSliderCarouselCurrentSlide"] != null &&
                      typeof $steps["updateSliderCarouselCurrentSlide"] ===
                        "object" &&
                      typeof $steps["updateSliderCarouselCurrentSlide"].then ===
                        "function"
                    ) {
                      $steps["updateSliderCarouselCurrentSlide"] = await $steps[
                        "updateSliderCarouselCurrentSlide"
                      ];
                    }
                  }}
                >
                  <ChunkyButton
                    className={classNames(
                      "__wab_instance",
                      sty.chunkyButton__seMjf
                    )}
                    text={">"}
                  />
                </div>
              </div>
            </div>
          </Stack__>
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox__dyhqn)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__jnd9A
            )}
            component={Link}
            href={`/portfolio`}
            platform={"nextjs"}
          >
            <ChunkyButton
              className={classNames("__wab_instance", sty.chunkyButton__izIzG)}
              text={"Back to Portfolio"}
            />
          </PlasmicLink__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "columns", "sliderCarousel2"],
  navbar: ["navbar"],
  columns: ["columns", "sliderCarousel2"],
  sliderCarousel2: ["sliderCarousel2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  columns: "div";
  sliderCarousel2: typeof SliderWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMoreInfoQueenie__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMoreInfoQueenie__VariantsArgs;
    args?: PlasmicMoreInfoQueenie__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMoreInfoQueenie__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMoreInfoQueenie__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMoreInfoQueenie__ArgProps,
          internalVariantPropNames: PlasmicMoreInfoQueenie__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMoreInfoQueenie__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMoreInfoQueenie";
  } else {
    func.displayName = `PlasmicMoreInfoQueenie.${nodeName}`;
  }
  return func;
}

export const PlasmicMoreInfoQueenie = Object.assign(
  // Top-level PlasmicMoreInfoQueenie renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    columns: makeNodeComponent("columns"),
    sliderCarousel2: makeNodeComponent("sliderCarousel2"),

    // Metadata about props expected for PlasmicMoreInfoQueenie
    internalVariantProps: PlasmicMoreInfoQueenie__VariantProps,
    internalArgProps: PlasmicMoreInfoQueenie__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMoreInfoQueenie;
/* prettier-ignore-end */
