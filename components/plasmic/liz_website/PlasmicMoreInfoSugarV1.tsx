// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pqbSBZb9VG36A9gA4GgWPg
// Component: W_0c-3I8RVPn

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: tGuDlEY_p2-T/component
import ChunkyButton from "../../ChunkyButton"; // plasmic-import: afhvlQtgWcWV/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: pqbSBZb9VG36A9gA4GgWPg/projectcss
import sty from "./PlasmicMoreInfoSugarV1.module.css"; // plasmic-import: W_0c-3I8RVPn/css

createPlasmicElementProxy;

export type PlasmicMoreInfoSugarV1__VariantMembers = {};
export type PlasmicMoreInfoSugarV1__VariantsArgs = {};
type VariantPropType = keyof PlasmicMoreInfoSugarV1__VariantsArgs;
export const PlasmicMoreInfoSugarV1__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMoreInfoSugarV1__ArgsType = {};
type ArgPropType = keyof PlasmicMoreInfoSugarV1__ArgsType;
export const PlasmicMoreInfoSugarV1__ArgProps = new Array<ArgPropType>();

export type PlasmicMoreInfoSugarV1__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  columns?: Flex__<"div">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
};

export interface DefaultMoreInfoSugarV1Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMoreInfoSugarV1__RenderFunc(props: {
  variants: PlasmicMoreInfoSugarV1__VariantsArgs;
  args: PlasmicMoreInfoSugarV1__ArgsType;
  overrides: PlasmicMoreInfoSugarV1__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <Navbar
          data-plasmic-name={"navbar"}
          data-plasmic-override={overrides.navbar}
          className={classNames("__wab_instance", sty.navbar)}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__gbIv4)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mtArQ
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Asset Credits"}
              </span>
            </React.Fragment>
          </div>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__inli9
            )}
            component={Link}
            platform={"nextjs"}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__zfxLv
                  )}
                  component={Link}
                  href={"https://discord.com/invite/Mj9hqZtXvF"}
                  platform={"nextjs"}
                >
                  {"Bapperbeast Base Model . AnEpicBeard . Updated by PxINKY"}
                </PlasmicLink__>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__siRhl
            )}
            component={Link}
            platform={"nextjs"}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__keEpp
                  )}
                  component={Link}
                  href={"https://novaicnight.gumroad.com"}
                  platform={"nextjs"}
                >
                  {"Wings and Tail .  NovaicNight"}
                </PlasmicLink__>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__mZ2A2
            )}
            component={Link}
            platform={"nextjs"}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__em2V7
                  )}
                  component={Link}
                  href={"https://aidenart.gumroad.com/l/fwZkp?layout=profile"}
                  platform={"nextjs"}
                >
                  {"Hair . AidenFur"}
                </PlasmicLink__>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </PlasmicLink__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__amOnw)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uolJr
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Showcase Photos"}
              </span>
            </React.Fragment>
          </div>
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__nKrPf)}>
              <div
                className={classNames(projectcss.all, sty.freeBox___88BdR)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSliderCarouselCurrentSlide"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["sliderCarousel", "currentSlide"]
                          },
                          operation: 3
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, oldValue - 1);
                          return oldValue - 1;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSliderCarouselCurrentSlide"] != null &&
                    typeof $steps["updateSliderCarouselCurrentSlide"] ===
                      "object" &&
                    typeof $steps["updateSliderCarouselCurrentSlide"].then ===
                      "function"
                  ) {
                    $steps["updateSliderCarouselCurrentSlide"] = await $steps[
                      "updateSliderCarouselCurrentSlide"
                    ];
                  }
                }}
              >
                <ChunkyButton
                  className={classNames(
                    "__wab_instance",
                    sty.chunkyButton__mj8Yq
                  )}
                  text={"<"}
                />
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.column__a9NdR)}>
              {(() => {
                const child$Props = {
                  arrowColor: true ? "#331009" : undefined,
                  arrows: false,
                  autoplay: false,
                  autoplaySpeed: 0,
                  beforeChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "currentSlide",
                      ["sliderCarousel", "currentSlide"],
                      SliderWrapper_Helpers
                    ).apply(null, eventArgs);
                  },
                  centerMode: false,
                  className: classNames("__wab_instance", sty.sliderCarousel),
                  cssEase: "ease-in-out",
                  dots: false,
                  fade: true,
                  initialSlide: generateStateValueProp($state, [
                    "sliderCarousel",
                    "currentSlide"
                  ]),
                  ref: ref => {
                    $refs["sliderCarousel"] = ref;
                  },
                  sliderScopeClassName: sty["sliderCarousel__slider"],
                  speed: 250,
                  useCSS: true,
                  vertical: false
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "currentSlide",
                      plasmicStateName: "sliderCarousel.currentSlide"
                    }
                  ],
                  [],
                  SliderWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <SliderWrapper
                    data-plasmic-name={"sliderCarousel"}
                    data-plasmic-override={overrides.sliderCarousel}
                    {...child$Props}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6TgRe
                      )}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__khzMd)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"33%"}
                        src={{
                          src: "/plasmic/liz_website/images/vrChat20230513174053Png.png",
                          fullWidth: 338,
                          fullHeight: 601,
                          aspectRatio: undefined
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__cjTm9)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"33%"}
                        src={{
                          src: "/plasmic/liz_website/images/vrChat202304141320028364320X7680Png.png",
                          fullWidth: 4320,
                          fullHeight: 7680,
                          aspectRatio: undefined
                        }}
                      />

                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__vofat)}
                        displayHeight={"auto"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"33%"}
                        src={{
                          src: "/plasmic/liz_website/images/vrChat20230425195355Png.png",
                          fullWidth: 338,
                          fullHeight: 601,
                          aspectRatio: undefined
                        }}
                      />
                    </Stack__>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__aAy)}
                    >
                      <PlasmicImg__
                        alt={""}
                        className={classNames(sty.img__csBzr)}
                        displayHeight={"100%"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"100%"}
                        src={{
                          src: "/plasmic/liz_website/images/vrChat202304141315245547680X4320Png.png",
                          fullWidth: 7680,
                          fullHeight: 4320,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </SliderWrapper>
                );
              })()}
            </div>
            <div className={classNames(projectcss.all, sty.column__oyfF4)}>
              <div
                className={classNames(projectcss.all, sty.freeBox__loJ3V)}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateSliderCarouselCurrentSlide"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["sliderCarousel", "currentSlide"]
                          },
                          operation: 2
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = $stateGet(objRoot, variablePath);
                          $stateSet(objRoot, variablePath, oldValue + 1);
                          return oldValue + 1;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateSliderCarouselCurrentSlide"] != null &&
                    typeof $steps["updateSliderCarouselCurrentSlide"] ===
                      "object" &&
                    typeof $steps["updateSliderCarouselCurrentSlide"].then ===
                      "function"
                  ) {
                    $steps["updateSliderCarouselCurrentSlide"] = await $steps[
                      "updateSliderCarouselCurrentSlide"
                    ];
                  }
                }}
              >
                <ChunkyButton
                  className={classNames(
                    "__wab_instance",
                    sty.chunkyButton__jpRnB
                  )}
                  text={">"}
                />
              </div>
            </div>
          </div>
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox__c36Pc)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__pfk8F
            )}
            component={Link}
            href={`/portfolio`}
            platform={"nextjs"}
          >
            <ChunkyButton
              className={classNames("__wab_instance", sty.chunkyButton__qqYrh)}
              text={"Back to Portfolio"}
            />
          </PlasmicLink__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "columns", "sliderCarousel"],
  navbar: ["navbar"],
  columns: ["columns", "sliderCarousel"],
  sliderCarousel: ["sliderCarousel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  columns: "div";
  sliderCarousel: typeof SliderWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMoreInfoSugarV1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMoreInfoSugarV1__VariantsArgs;
    args?: PlasmicMoreInfoSugarV1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMoreInfoSugarV1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMoreInfoSugarV1__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMoreInfoSugarV1__ArgProps,
          internalVariantPropNames: PlasmicMoreInfoSugarV1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMoreInfoSugarV1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMoreInfoSugarV1";
  } else {
    func.displayName = `PlasmicMoreInfoSugarV1.${nodeName}`;
  }
  return func;
}

export const PlasmicMoreInfoSugarV1 = Object.assign(
  // Top-level PlasmicMoreInfoSugarV1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    columns: makeNodeComponent("columns"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),

    // Metadata about props expected for PlasmicMoreInfoSugarV1
    internalVariantProps: PlasmicMoreInfoSugarV1__VariantProps,
    internalArgProps: PlasmicMoreInfoSugarV1__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMoreInfoSugarV1;
/* prettier-ignore-end */
