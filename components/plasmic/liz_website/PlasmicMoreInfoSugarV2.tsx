/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pqbSBZb9VG36A9gA4GgWPg
// Component: gps9zapGC3h9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: tGuDlEY_p2-T/component
import ChunkyButton from "../../ChunkyButton"; // plasmic-import: afhvlQtgWcWV/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: pqbSBZb9VG36A9gA4GgWPg/projectcss
import sty from "./PlasmicMoreInfoSugarV2.module.css"; // plasmic-import: gps9zapGC3h9/css

createPlasmicElementProxy;

export type PlasmicMoreInfoSugarV2__VariantMembers = {};
export type PlasmicMoreInfoSugarV2__VariantsArgs = {};
type VariantPropType = keyof PlasmicMoreInfoSugarV2__VariantsArgs;
export const PlasmicMoreInfoSugarV2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMoreInfoSugarV2__ArgsType = {};
type ArgPropType = keyof PlasmicMoreInfoSugarV2__ArgsType;
export const PlasmicMoreInfoSugarV2__ArgProps = new Array<ArgPropType>();

export type PlasmicMoreInfoSugarV2__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  columns?: Flex__<"div">;
  sliderCarousel2?: Flex__<typeof SliderWrapper>;
};

export interface DefaultMoreInfoSugarV2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMoreInfoSugarV2__RenderFunc(props: {
  variants: PlasmicMoreInfoSugarV2__VariantsArgs;
  args: PlasmicMoreInfoSugarV2__ArgsType;
  overrides: PlasmicMoreInfoSugarV2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel2.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel2",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <Navbar
          data-plasmic-name={"navbar"}
          data-plasmic-override={overrides.navbar}
          className={classNames("__wab_instance", sty.navbar)}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__sh9Kp)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__t2Aya
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Asset Credits"}
              </span>
            </React.Fragment>
          </div>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__wlhgy
            )}
            component={Link}
            platform={"nextjs"}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__mKdQg
                  )}
                  component={Link}
                  href={"https://discord.com/invite/Mj9hqZtXvF"}
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  {"Bapperbeast Base Model . AnEpicBeard . Updated by PxINKY"}
                </PlasmicLink__>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__ctXkl
            )}
            component={Link}
            platform={"nextjs"}
            target={"_blank"}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__jsoG4
                  )}
                  component={Link}
                  href={
                    "https://novaicnight.gumroad.com/l/fluffytail?layout=profile"
                  }
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  {"Tail .  NovaicNight"}
                </PlasmicLink__>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__y9S4B
            )}
            component={Link}
            platform={"nextjs"}
            target={"_blank"}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    projectcss.plasmic_default__inline,
                    sty.link__sa92N
                  )}
                  component={Link}
                  href={"https://aidenart.gumroad.com/l/fwZkp?layout=profile"}
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  {"Hair . AidenFur"}
                </PlasmicLink__>
              }
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__tho5B
            )}
            component={Link}
            href={"https://www.poiyomi.com"}
            platform={"nextjs"}
            target={"_blank"}
          >
            {"Poiyomi Shaders - Poiyomi"}
          </PlasmicLink__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__rpBq5)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rFhre
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Avatar Information"}
              </span>
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wgWl
            )}
          >
            {
              "A while after I made my original design for Sugar, I decided I could do better on their design. This is the second version of Sugar has a whole new pattern on their body, as well as updated eyes. Many people found their first design to be uncanny when interacting with it in VrChat, but couldn't place why. After a lot of thought, I decided to redesign their eyes. Their first design had three pupils around a central point, which made eye contact difficult during conversation. For this new version I decided to make one central pupil with two smaller ones near it, making a clear point for people to make eye contact with. This was a unique design challenge to tackle, version two of this character was more well received\r\nthan version one in VR!"
            }
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__zKhDc)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__l2NN2)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oszBu
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Showcase Photos"}
                </span>
              </React.Fragment>
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gjt78)}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__gxvRj)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"33%"}
                src={{
                  src: "/plasmic/liz_website/images/vrChat20240114151258Png.png",
                  fullWidth: 338,
                  fullHeight: 601,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img___1HfNb)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"33%"}
                src={{
                  src: "/plasmic/liz_website/images/vrChat20240114151320Png.png",
                  fullWidth: 338,
                  fullHeight: 601,
                  aspectRatio: undefined
                }}
              />
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__kJl8G)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__jTwdc)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: "/plasmic/liz_website/images/vrChat202308041057051947680X4320Png.png",
                  fullWidth: 7680,
                  fullHeight: 4320,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___1GHbL)}>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__yftUo)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                src={{
                  src: "/plasmic/liz_website/images/vrChat20230808225430Png.png",
                  fullWidth: 719,
                  fullHeight: 404,
                  aspectRatio: undefined
                }}
              />
            </div>
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__nWVm8)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__yd0RK)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSliderCarouselCurrentSlide"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["sliderCarousel2", "currentSlide"]
                            },
                            operation: 3
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, oldValue - 1);
                            return oldValue - 1;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSliderCarouselCurrentSlide"] != null &&
                      typeof $steps["updateSliderCarouselCurrentSlide"] ===
                        "object" &&
                      typeof $steps["updateSliderCarouselCurrentSlide"].then ===
                        "function"
                    ) {
                      $steps["updateSliderCarouselCurrentSlide"] = await $steps[
                        "updateSliderCarouselCurrentSlide"
                      ];
                    }
                  }}
                >
                  <ChunkyButton
                    className={classNames(
                      "__wab_instance",
                      sty.chunkyButton__vhfaj
                    )}
                    text={"<"}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.column__uc4P)}>
                {(() => {
                  const child$Props = {
                    arrowColor: true ? "#331009" : undefined,
                    arrows: false,
                    autoplay: false,
                    autoplaySpeed: 0,
                    beforeChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "currentSlide",
                        ["sliderCarousel2", "currentSlide"],
                        SliderWrapper_Helpers
                      ).apply(null, eventArgs);
                    },
                    centerMode: false,
                    children: null,
                    className: classNames(
                      "__wab_instance",
                      sty.sliderCarousel2
                    ),
                    cssEase: "ease-in-out",
                    dots: false,
                    fade: true,
                    initialSlide: generateStateValueProp($state, [
                      "sliderCarousel2",
                      "currentSlide"
                    ]),
                    ref: ref => {
                      $refs["sliderCarousel2"] = ref;
                    },
                    sliderScopeClassName: sty["sliderCarousel2__slider"],
                    speed: 250,
                    useCSS: true,
                    vertical: false
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "currentSlide",
                        plasmicStateName: "sliderCarousel2.currentSlide"
                      }
                    ],
                    [],
                    SliderWrapper_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <SliderWrapper
                      data-plasmic-name={"sliderCarousel2"}
                      data-plasmic-override={overrides.sliderCarousel2}
                      {...child$Props}
                    />
                  );
                })()}
              </div>
              <div className={classNames(projectcss.all, sty.column__gzkg6)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__gy6Oj)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateSliderCarouselCurrentSlide"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["sliderCarousel2", "currentSlide"]
                            },
                            operation: 2
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, oldValue + 1);
                            return oldValue + 1;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateSliderCarouselCurrentSlide"] != null &&
                      typeof $steps["updateSliderCarouselCurrentSlide"] ===
                        "object" &&
                      typeof $steps["updateSliderCarouselCurrentSlide"].then ===
                        "function"
                    ) {
                      $steps["updateSliderCarouselCurrentSlide"] = await $steps[
                        "updateSliderCarouselCurrentSlide"
                      ];
                    }
                  }}
                >
                  <ChunkyButton
                    className={classNames(
                      "__wab_instance",
                      sty.chunkyButton__sAog
                    )}
                    text={">"}
                  />
                </div>
              </div>
            </div>
          </Stack__>
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox__b0Xv0)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___6KFdU
            )}
            component={Link}
            href={`/portfolio`}
            platform={"nextjs"}
          >
            <ChunkyButton
              className={classNames("__wab_instance", sty.chunkyButton__bggn4)}
              text={"Back to Portfolio"}
            />
          </PlasmicLink__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "columns", "sliderCarousel2"],
  navbar: ["navbar"],
  columns: ["columns", "sliderCarousel2"],
  sliderCarousel2: ["sliderCarousel2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  columns: "div";
  sliderCarousel2: typeof SliderWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMoreInfoSugarV2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMoreInfoSugarV2__VariantsArgs;
    args?: PlasmicMoreInfoSugarV2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMoreInfoSugarV2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMoreInfoSugarV2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMoreInfoSugarV2__ArgProps,
          internalVariantPropNames: PlasmicMoreInfoSugarV2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMoreInfoSugarV2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMoreInfoSugarV2";
  } else {
    func.displayName = `PlasmicMoreInfoSugarV2.${nodeName}`;
  }
  return func;
}

export const PlasmicMoreInfoSugarV2 = Object.assign(
  // Top-level PlasmicMoreInfoSugarV2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    columns: makeNodeComponent("columns"),
    sliderCarousel2: makeNodeComponent("sliderCarousel2"),

    // Metadata about props expected for PlasmicMoreInfoSugarV2
    internalVariantProps: PlasmicMoreInfoSugarV2__VariantProps,
    internalArgProps: PlasmicMoreInfoSugarV2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMoreInfoSugarV2;
/* prettier-ignore-end */
