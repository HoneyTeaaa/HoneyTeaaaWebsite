// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pqbSBZb9VG36A9gA4GgWPg
// Component: VEW3qGmI_rAq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import CheckboxGroup from "../../CheckboxGroup"; // plasmic-import: _BIGxKAKL5XW/component
import Checkbox from "../../Checkbox"; // plasmic-import: vt7lInvVpX0M/component
import Polaroid from "../../Polaroid"; // plasmic-import: SGzL5zPyMcua/component
import VhsTape from "../../VhsTape"; // plasmic-import: voAPSAvZhi6l/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: pqbSBZb9VG36A9gA4GgWPg/projectcss
import sty from "./PlasmicPinboard.module.css"; // plasmic-import: VEW3qGmI_rAq/css

createPlasmicElementProxy;

export type PlasmicPinboard__VariantMembers = {
  projectType: "fIlm" | "unity" | "vrChat" | "blender";
};
export type PlasmicPinboard__VariantsArgs = {
  projectType?: MultiChoiceArg<"fIlm" | "unity" | "vrChat" | "blender">;
};
type VariantPropType = keyof PlasmicPinboard__VariantsArgs;
export const PlasmicPinboard__VariantProps = new Array<VariantPropType>(
  "projectType"
);

export type PlasmicPinboard__ArgsType = {};
type ArgPropType = keyof PlasmicPinboard__ArgsType;
export const PlasmicPinboard__ArgProps = new Array<ArgPropType>();

export type PlasmicPinboard__OverridesType = {
  pinboard?: Flex__<"div">;
  checkboxGroup?: Flex__<typeof CheckboxGroup>;
  freeBox?: Flex__<"div">;
  option1?: Flex__<typeof Checkbox>;
  option2?: Flex__<typeof Checkbox>;
  option3?: Flex__<typeof Checkbox>;
  option4?: Flex__<typeof Checkbox>;
  polaroid10?: Flex__<typeof Polaroid>;
  polaroid?: Flex__<typeof Polaroid>;
  polaroid12?: Flex__<typeof Polaroid>;
  polaroid11?: Flex__<typeof Polaroid>;
  polaroid2?: Flex__<typeof Polaroid>;
  polaroid5?: Flex__<typeof Polaroid>;
  polaroid9?: Flex__<typeof Polaroid>;
  polaroid7?: Flex__<typeof Polaroid>;
  polaroid8?: Flex__<typeof Polaroid>;
  polaroid6?: Flex__<typeof Polaroid>;
};

export interface DefaultPinboardProps {
  projectType?: MultiChoiceArg<"fIlm" | "unity" | "vrChat" | "blender">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPinboard__RenderFunc(props: {
  variants: PlasmicPinboard__VariantsArgs;
  args: PlasmicPinboard__ArgsType;
  overrides: PlasmicPinboard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkboxGroup.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "option1.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "option2.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "option3.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "projectType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.projectType
      },
      {
        path: "option4.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"pinboard"}
      data-plasmic-override={overrides.pinboard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.pinboard,
        {
          [sty.pinboardprojectType_blender]: hasVariant(
            $state,
            "projectType",
            "blender"
          ),
          [sty.pinboardprojectType_unity]: hasVariant(
            $state,
            "projectType",
            "unity"
          ),
          [sty.pinboardprojectType_vrChat]: hasVariant(
            $state,
            "projectType",
            "vrChat"
          )
        }
      )}
    >
      <CheckboxGroup
        data-plasmic-name={"checkboxGroup"}
        data-plasmic-override={overrides.checkboxGroup}
        className={classNames("__wab_instance", sty.checkboxGroup)}
        defaultValues={[]}
        label={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fq5Tn
            )}
          >
            {"Project Types"}
          </div>
        }
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["checkboxGroup", "value"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        options={
          <Stack__
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Checkbox
              data-plasmic-name={"option1"}
              data-plasmic-override={overrides.option1}
              className={classNames("__wab_instance", sty.option1)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fBylD
                  )}
                >
                  {"Unity"}
                </div>
              }
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "option1",
                  "isSelected"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["updateProjectType"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "projectType",
                          operation: 3,
                          value: "unity"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          let activeVariants = $stateGet($state, vgroup) ?? [];
                          if (typeof activeVariants === "string") {
                            activeVariants = [activeVariants];
                          }
                          for (const variant of value) {
                            if (activeVariants.includes(variant)) {
                              activeVariants.splice(
                                activeVariants.indexOf(variant),
                                1
                              );
                            } else {
                              activeVariants.push(variant);
                            }
                          }
                          $stateSet($state, vgroup, activeVariants);
                          return activeVariants;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProjectType"] != null &&
                    typeof $steps["updateProjectType"] === "object" &&
                    typeof $steps["updateProjectType"].then === "function"
                  ) {
                    $steps["updateProjectType"] = await $steps[
                      "updateProjectType"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              value={"unity"}
            />

            <Checkbox
              data-plasmic-name={"option2"}
              data-plasmic-override={overrides.option2}
              className={classNames("__wab_instance", sty.option2)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eeKpx
                  )}
                >
                  {"Film"}
                </div>
              }
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "option2",
                  "isSelected"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["updateProjectType"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "projectType",
                          operation: 3,
                          value: "fIlm"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          let activeVariants = $stateGet($state, vgroup) ?? [];
                          if (typeof activeVariants === "string") {
                            activeVariants = [activeVariants];
                          }
                          for (const variant of value) {
                            if (activeVariants.includes(variant)) {
                              activeVariants.splice(
                                activeVariants.indexOf(variant),
                                1
                              );
                            } else {
                              activeVariants.push(variant);
                            }
                          }
                          $stateSet($state, vgroup, activeVariants);
                          return activeVariants;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProjectType"] != null &&
                    typeof $steps["updateProjectType"] === "object" &&
                    typeof $steps["updateProjectType"].then === "function"
                  ) {
                    $steps["updateProjectType"] = await $steps[
                      "updateProjectType"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              value={"filmProjects"}
            />

            <Checkbox
              data-plasmic-name={"option3"}
              data-plasmic-override={overrides.option3}
              className={classNames("__wab_instance", sty.option3)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vPvq
                  )}
                >
                  {"VRChat"}
                </div>
              }
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "option3",
                  "isSelected"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["updateProjectType"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "projectType",
                          operation: 3,
                          value: "vrChat"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          let activeVariants = $stateGet($state, vgroup) ?? [];
                          if (typeof activeVariants === "string") {
                            activeVariants = [activeVariants];
                          }
                          for (const variant of value) {
                            if (activeVariants.includes(variant)) {
                              activeVariants.splice(
                                activeVariants.indexOf(variant),
                                1
                              );
                            } else {
                              activeVariants.push(variant);
                            }
                          }
                          $stateSet($state, vgroup, activeVariants);
                          return activeVariants;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProjectType"] != null &&
                    typeof $steps["updateProjectType"] === "object" &&
                    typeof $steps["updateProjectType"].then === "function"
                  ) {
                    $steps["updateProjectType"] = await $steps[
                      "updateProjectType"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              value={"filmProjects"}
            />

            <Checkbox
              data-plasmic-name={"option4"}
              data-plasmic-override={overrides.option4}
              className={classNames("__wab_instance", sty.option4)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pXg7
                  )}
                >
                  {"Blender"}
                </div>
              }
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "option4",
                  "isSelected"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["updateProjectType"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "projectType",
                          operation: 3,
                          value: "blender"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          let activeVariants = $stateGet($state, vgroup) ?? [];
                          if (typeof activeVariants === "string") {
                            activeVariants = [activeVariants];
                          }
                          for (const variant of value) {
                            if (activeVariants.includes(variant)) {
                              activeVariants.splice(
                                activeVariants.indexOf(variant),
                                1
                              );
                            } else {
                              activeVariants.push(variant);
                            }
                          }
                          $stateSet($state, vgroup, activeVariants);
                          return activeVariants;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProjectType"] != null &&
                    typeof $steps["updateProjectType"] === "object" &&
                    typeof $steps["updateProjectType"].then === "function"
                  ) {
                    $steps["updateProjectType"] = await $steps[
                      "updateProjectType"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              value={"filmProjects"}
            />
          </Stack__>
        }
        showDescription={false}
      />

      <div
        className={classNames(projectcss.all, sty.columns__z0BmF, {
          [sty.columnsprojectType_unity__z0BmFNjRr]: hasVariant(
            $state,
            "projectType",
            "unity"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.column__ikohT)}>
          <Polaroid
            data-plasmic-name={"polaroid10"}
            data-plasmic-override={overrides.polaroid10}
            backHeader1={"Software Used"}
            className={classNames("__wab_instance", sty.polaroid10, {
              [sty.polaroid10projectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.polaroid10projectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.polaroid10projectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              ),
              [sty.polaroid10projectType_vrChat]: hasVariant(
                $state,
                "projectType",
                "vrChat"
              )
            })}
            date2={"2025 (In Progress)"}
            infoPage={`/portfolio`}
            projectTitle={"TeaSona"}
            slot={""}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__u9SdO)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/image8.png",
                fullWidth: 1668,
                fullHeight: 2420,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column___1E0Ss)}>
          <VhsTape
            background={
              <React.Fragment>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__g0ARy)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liz_website/images/screenshot20250223170857Png.png",
                    fullWidth: 1558,
                    fullHeight: 985,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___7MuFz)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liz_website/images/image14.png",
                    fullWidth: 540,
                    fullHeight: 360,
                    aspectRatio: undefined
                  }}
                />
              </React.Fragment>
            }
            className={classNames("__wab_instance", sty.vhsTape__xZ5I8)}
            filmTitle={"Introspection"}
            year={"2024"}
          >
            {"Directed by Liz  Manz\nVFX + Music by Angelo Licavoli"}
          </VhsTape>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.columns__pdpGt, {
          [sty.columnsprojectType_unity__pdpGtNjRr]: hasVariant(
            $state,
            "projectType",
            "unity"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.column__crWri)}>
          <VhsTape
            background={
              <React.Fragment>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__z8Bb1)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liz_website/images/screenshot20250223170320Png.png",
                    fullWidth: 559,
                    fullHeight: 448,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___74TUg)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liz_website/images/image14.png",
                    fullWidth: 540,
                    fullHeight: 360,
                    aspectRatio: undefined
                  }}
                />
              </React.Fragment>
            }
            className={classNames("__wab_instance", sty.vhsTape__otzjR)}
            filmTitle={"Disuko"}
            year={"2024"}
          >
            {"Directed by Liz  Manz"}
          </VhsTape>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.columns__hwsK4, {
          [sty.columnsprojectType_unity__hwsK4NjRr]: hasVariant(
            $state,
            "projectType",
            "unity"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.column__zYcru)}>
          <Polaroid
            data-plasmic-name={"polaroid"}
            data-plasmic-override={overrides.polaroid}
            backHeader1={``}
            className={classNames("__wab_instance", sty.polaroid, {
              [sty.polaroidprojectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.polaroidprojectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.polaroidprojectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              ),
              [sty.polaroidprojectType_vrChat]: hasVariant(
                $state,
                "projectType",
                "vrChat"
              )
            })}
            date2={"2024"}
            projectTitle={"Piece a Shit"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__nS554, {
                [sty.imgprojectType_unity__nS554NjRr]: hasVariant(
                  $state,
                  "projectType",
                  "unity"
                )
              })}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/screenshot20250225164249Png.png",
                fullWidth: 1585,
                fullHeight: 802,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__fP0Bd)}>
          <Polaroid
            data-plasmic-name={"polaroid12"}
            data-plasmic-override={overrides.polaroid12}
            backHeader1={"Software Used"}
            className={classNames("__wab_instance", sty.polaroid12, {
              [sty.polaroid12projectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.polaroid12projectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.polaroid12projectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              ),
              [sty.polaroid12projectType_vrChat]: hasVariant(
                $state,
                "projectType",
                "vrChat"
              )
            })}
            date2={"2024"}
            projectTitle={"Drink Render"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___6XPdf)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/latteGif.gif",
                fullWidth: 600,
                fullHeight: 600,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__jvz88)}>
          <Polaroid
            data-plasmic-name={"polaroid11"}
            data-plasmic-override={overrides.polaroid11}
            backHeader1={``}
            className={classNames("__wab_instance", sty.polaroid11, {
              [sty.polaroid11projectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.polaroid11projectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.polaroid11projectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              )
            })}
            date2={"2024"}
            projectTitle={"Mochaccino"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__jxQce)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/image9.png",
                fullWidth: 2560,
                fullHeight: 1440,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.columns__wwKzh)}>
        <div className={classNames(projectcss.all, sty.column__gCyR)}>
          <Polaroid
            data-plasmic-name={"polaroid2"}
            data-plasmic-override={overrides.polaroid2}
            backHeader1={"Credits:"}
            className={classNames("__wab_instance", sty.polaroid2, {
              [sty.polaroid2projectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.polaroid2projectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              )
            })}
            date2={"2023"}
            projectTitle={"Astro"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__gguFg, {
                [sty.imgprojectType_blender__gguFGgS4Vu]: hasVariant(
                  $state,
                  "projectType",
                  "blender"
                )
              })}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/image10.png",
                fullWidth: 214,
                fullHeight: 381,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__gtFj)}>
          <Polaroid
            data-plasmic-name={"polaroid5"}
            data-plasmic-override={overrides.polaroid5}
            backHeader1={"Credits:"}
            className={classNames("__wab_instance", sty.polaroid5, {
              [sty.polaroid5projectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.polaroid5projectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              )
            })}
            date2={"2023"}
            projectTitle={"Aerie"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__fEbIo, {
                [sty.imgprojectType_blender__fEbIogS4Vu]: hasVariant(
                  $state,
                  "projectType",
                  "blender"
                )
              })}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/vrChat202401141510409523840X2160Webp.webp",
                fullWidth: 214,
                fullHeight: 381,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column___6LLa)}>
          <Polaroid
            data-plasmic-name={"polaroid9"}
            data-plasmic-override={overrides.polaroid9}
            backHeader1={"Software Used:"}
            className={classNames("__wab_instance", sty.polaroid9, {
              [sty.polaroid9projectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.polaroid9projectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.polaroid9projectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              )
            })}
            date2={"2023"}
            infoPage={`/Sugar V1-2`}
            projectTitle={"Sugar Ver. 2"}
            slot={
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p5Tdr
                  )}
                >
                  {"Substance Painter"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xN4Re
                  )}
                >
                  {"Blender"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__x3Reu
                  )}
                >
                  {"Unity"}
                </div>
              </React.Fragment>
            }
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__tiY81)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/vrChat20230808230323Png.png",
                fullWidth: 719,
                fullHeight: 404,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.columns__iVP9, {
          [sty.columnsprojectType_unity__iVP9NjRr]: hasVariant(
            $state,
            "projectType",
            "unity"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.column__glc00)}>
          <Polaroid
            data-plasmic-name={"polaroid7"}
            data-plasmic-override={overrides.polaroid7}
            backHeader1={"Software Used:"}
            className={classNames("__wab_instance", sty.polaroid7, {
              [sty.polaroid7projectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.polaroid7projectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.polaroid7projectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              )
            })}
            date2={"2022"}
            infoPage={`/Queenie`}
            projectTitle={"Queenie"}
            slot={
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yziqS
                  )}
                >
                  {"Substance Painter"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bahAo
                  )}
                >
                  {"Unity"}
                </div>
              </React.Fragment>
            }
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__hJgkh)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/vrChat20230521144825Png.png",
                fullWidth: 719,
                fullHeight: 404,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__ymYep)}>
          <Polaroid
            data-plasmic-name={"polaroid8"}
            data-plasmic-override={overrides.polaroid8}
            backHeader1={"Software Used:"}
            className={classNames("__wab_instance", sty.polaroid8, {
              [sty.polaroid8projectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.polaroid8projectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.polaroid8projectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              )
            })}
            date2={"2022"}
            infoPage={`/Sugar V1`}
            projectTitle={"Sugar Ver. 1"}
            slot={
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gw6KD
                  )}
                >
                  {"Substance Painter"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wqzRo
                  )}
                >
                  {"Unity"}
                </div>
              </React.Fragment>
            }
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__sShEc, {
                [sty.imgprojectType_fIlm__sShEc8ATfY]: hasVariant(
                  $state,
                  "projectType",
                  "fIlm"
                )
              })}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/vrChat20230425195355Png.png",
                fullWidth: 338,
                fullHeight: 601,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__qJlyj)}>
          <Polaroid
            data-plasmic-name={"polaroid6"}
            data-plasmic-override={overrides.polaroid6}
            backHeader1={"Software Used:"}
            className={classNames("__wab_instance", sty.polaroid6, {
              [sty.polaroid6projectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.polaroid6projectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.polaroid6projectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              )
            })}
            date2={"2022"}
            infoPage={`/Bee`}
            projectTitle={"Bee"}
            slot={
              <React.Fragment>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__lsi8A
                  )}
                >
                  {"Substance Painter"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__m7G9D
                  )}
                >
                  {"Unity"}
                </li>
              </React.Fragment>
            }
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__vLIK, {
                [sty.imgprojectType_fIlm__vLIK8ATfY]: hasVariant(
                  $state,
                  "projectType",
                  "fIlm"
                )
              })}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/vrChat202401141525565852160X3840Png.png",
                fullWidth: 2160,
                fullHeight: 3840,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  pinboard: [
    "pinboard",
    "checkboxGroup",
    "freeBox",
    "option1",
    "option2",
    "option3",
    "option4",
    "polaroid10",
    "polaroid",
    "polaroid12",
    "polaroid11",
    "polaroid2",
    "polaroid5",
    "polaroid9",
    "polaroid7",
    "polaroid8",
    "polaroid6"
  ],
  checkboxGroup: [
    "checkboxGroup",
    "freeBox",
    "option1",
    "option2",
    "option3",
    "option4"
  ],
  freeBox: ["freeBox", "option1", "option2", "option3", "option4"],
  option1: ["option1"],
  option2: ["option2"],
  option3: ["option3"],
  option4: ["option4"],
  polaroid10: ["polaroid10"],
  polaroid: ["polaroid"],
  polaroid12: ["polaroid12"],
  polaroid11: ["polaroid11"],
  polaroid2: ["polaroid2"],
  polaroid5: ["polaroid5"],
  polaroid9: ["polaroid9"],
  polaroid7: ["polaroid7"],
  polaroid8: ["polaroid8"],
  polaroid6: ["polaroid6"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  pinboard: "div";
  checkboxGroup: typeof CheckboxGroup;
  freeBox: "div";
  option1: typeof Checkbox;
  option2: typeof Checkbox;
  option3: typeof Checkbox;
  option4: typeof Checkbox;
  polaroid10: typeof Polaroid;
  polaroid: typeof Polaroid;
  polaroid12: typeof Polaroid;
  polaroid11: typeof Polaroid;
  polaroid2: typeof Polaroid;
  polaroid5: typeof Polaroid;
  polaroid9: typeof Polaroid;
  polaroid7: typeof Polaroid;
  polaroid8: typeof Polaroid;
  polaroid6: typeof Polaroid;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPinboard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPinboard__VariantsArgs;
    args?: PlasmicPinboard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPinboard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPinboard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPinboard__ArgProps,
          internalVariantPropNames: PlasmicPinboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPinboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "pinboard") {
    func.displayName = "PlasmicPinboard";
  } else {
    func.displayName = `PlasmicPinboard.${nodeName}`;
  }
  return func;
}

export const PlasmicPinboard = Object.assign(
  // Top-level PlasmicPinboard renders the root element
  makeNodeComponent("pinboard"),
  {
    // Helper components rendering sub-elements
    checkboxGroup: makeNodeComponent("checkboxGroup"),
    freeBox: makeNodeComponent("freeBox"),
    option1: makeNodeComponent("option1"),
    option2: makeNodeComponent("option2"),
    option3: makeNodeComponent("option3"),
    option4: makeNodeComponent("option4"),
    polaroid10: makeNodeComponent("polaroid10"),
    polaroid: makeNodeComponent("polaroid"),
    polaroid12: makeNodeComponent("polaroid12"),
    polaroid11: makeNodeComponent("polaroid11"),
    polaroid2: makeNodeComponent("polaroid2"),
    polaroid5: makeNodeComponent("polaroid5"),
    polaroid9: makeNodeComponent("polaroid9"),
    polaroid7: makeNodeComponent("polaroid7"),
    polaroid8: makeNodeComponent("polaroid8"),
    polaroid6: makeNodeComponent("polaroid6"),

    // Metadata about props expected for PlasmicPinboard
    internalVariantProps: PlasmicPinboard__VariantProps,
    internalArgProps: PlasmicPinboard__ArgProps
  }
);

export default PlasmicPinboard;
/* prettier-ignore-end */
