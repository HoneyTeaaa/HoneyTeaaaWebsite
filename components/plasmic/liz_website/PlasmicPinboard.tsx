/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pqbSBZb9VG36A9gA4GgWPg
// Component: VEW3qGmI_rAq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import CheckboxGroup from "../../CheckboxGroup"; // plasmic-import: _BIGxKAKL5XW/component
import Checkbox from "../../Checkbox"; // plasmic-import: vt7lInvVpX0M/component
import Polaroid from "../../Polaroid"; // plasmic-import: SGzL5zPyMcua/component
import VhsTape from "../../VhsTape"; // plasmic-import: voAPSAvZhi6l/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: pqbSBZb9VG36A9gA4GgWPg/projectcss
import sty from "./PlasmicPinboard.module.css"; // plasmic-import: VEW3qGmI_rAq/css

createPlasmicElementProxy;

export type PlasmicPinboard__VariantMembers = {
  projectType: "fIlm" | "unity" | "vrChat" | "blender";
};
export type PlasmicPinboard__VariantsArgs = {
  projectType?: MultiChoiceArg<"fIlm" | "unity" | "vrChat" | "blender">;
};
type VariantPropType = keyof PlasmicPinboard__VariantsArgs;
export const PlasmicPinboard__VariantProps = new Array<VariantPropType>(
  "projectType"
);

export type PlasmicPinboard__ArgsType = {};
type ArgPropType = keyof PlasmicPinboard__ArgsType;
export const PlasmicPinboard__ArgProps = new Array<ArgPropType>();

export type PlasmicPinboard__OverridesType = {
  pinboard?: Flex__<"div">;
  checkboxGroup?: Flex__<typeof CheckboxGroup>;
  option1?: Flex__<typeof Checkbox>;
  option2?: Flex__<typeof Checkbox>;
  option3?: Flex__<typeof Checkbox>;
  option4?: Flex__<typeof Checkbox>;
  bugTaxi?: Flex__<typeof Polaroid>;
  mochaccinoCoverPhoto?: Flex__<typeof PlasmicImg__>;
  theHoneysong?: Flex__<typeof Polaroid>;
  honeysongCoverPhoto?: Flex__<typeof PlasmicImg__>;
  ul?: Flex__<"ul">;
  pieceAShit?: Flex__<typeof Polaroid>;
  pieceAShitCoverPhoto?: Flex__<typeof PlasmicImg__>;
  drinkRender?: Flex__<typeof Polaroid>;
  drinkRenderCoverPhoto?: Flex__<typeof PlasmicImg__>;
  mochaccino?: Flex__<typeof Polaroid>;
  mochaccinoCoverPhoto2?: Flex__<typeof PlasmicImg__>;
  astro?: Flex__<typeof Polaroid>;
  astroCoverPhoto?: Flex__<typeof PlasmicImg__>;
  aerie?: Flex__<typeof Polaroid>;
  aerieCoverPhoto?: Flex__<typeof PlasmicImg__>;
  sugarVer2?: Flex__<typeof Polaroid>;
  sugarCoverPhoto?: Flex__<typeof PlasmicImg__>;
  queenie?: Flex__<typeof Polaroid>;
  queenieCoverPhoto?: Flex__<typeof PlasmicImg__>;
  sugarVer1?: Flex__<typeof Polaroid>;
  sugarVer1CoverPhoto?: Flex__<typeof PlasmicImg__>;
  bee?: Flex__<typeof Polaroid>;
  beeCoverPhoto?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultPinboardProps {
  projectType?: MultiChoiceArg<"fIlm" | "unity" | "vrChat" | "blender">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPinboard__RenderFunc(props: {
  variants: PlasmicPinboard__VariantsArgs;
  args: PlasmicPinboard__ArgsType;
  overrides: PlasmicPinboard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkboxGroup.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "option1.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "option2.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "option3.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "projectType",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.projectType
      },
      {
        path: "option4.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"pinboard"}
      data-plasmic-override={overrides.pinboard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.pinboard,
        {
          [sty.pinboardprojectType_blender]: hasVariant(
            $state,
            "projectType",
            "blender"
          ),
          [sty.pinboardprojectType_unity]: hasVariant(
            $state,
            "projectType",
            "unity"
          ),
          [sty.pinboardprojectType_vrChat]: hasVariant(
            $state,
            "projectType",
            "vrChat"
          )
        }
      )}
    >
      <CheckboxGroup
        data-plasmic-name={"checkboxGroup"}
        data-plasmic-override={overrides.checkboxGroup}
        className={classNames("__wab_instance", sty.checkboxGroup)}
        defaultValues={[]}
        label={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__fq5Tn
            )}
          >
            {"Project Types"}
          </div>
        }
        onChange={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["checkboxGroup", "value"]).apply(
            null,
            eventArgs
          );

          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
        options={
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__n3ZfX)}
          >
            <Checkbox
              data-plasmic-name={"option1"}
              data-plasmic-override={overrides.option1}
              className={classNames("__wab_instance", sty.option1)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fBylD
                  )}
                >
                  {"Unity"}
                </div>
              }
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "option1",
                  "isSelected"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["updateProjectType"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "projectType",
                          operation: 3,
                          value: "unity"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          let activeVariants = $stateGet($state, vgroup) ?? [];
                          if (typeof activeVariants === "string") {
                            activeVariants = [activeVariants];
                          }
                          for (const variant of value) {
                            if (activeVariants.includes(variant)) {
                              activeVariants.splice(
                                activeVariants.indexOf(variant),
                                1
                              );
                            } else {
                              activeVariants.push(variant);
                            }
                          }
                          $stateSet($state, vgroup, activeVariants);
                          return activeVariants;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProjectType"] != null &&
                    typeof $steps["updateProjectType"] === "object" &&
                    typeof $steps["updateProjectType"].then === "function"
                  ) {
                    $steps["updateProjectType"] = await $steps[
                      "updateProjectType"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              value={"unity"}
            />

            <Checkbox
              data-plasmic-name={"option2"}
              data-plasmic-override={overrides.option2}
              className={classNames("__wab_instance", sty.option2)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eeKpx
                  )}
                >
                  {"Film"}
                </div>
              }
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "option2",
                  "isSelected"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["updateProjectType"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "projectType",
                          operation: 3,
                          value: "fIlm"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          let activeVariants = $stateGet($state, vgroup) ?? [];
                          if (typeof activeVariants === "string") {
                            activeVariants = [activeVariants];
                          }
                          for (const variant of value) {
                            if (activeVariants.includes(variant)) {
                              activeVariants.splice(
                                activeVariants.indexOf(variant),
                                1
                              );
                            } else {
                              activeVariants.push(variant);
                            }
                          }
                          $stateSet($state, vgroup, activeVariants);
                          return activeVariants;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProjectType"] != null &&
                    typeof $steps["updateProjectType"] === "object" &&
                    typeof $steps["updateProjectType"].then === "function"
                  ) {
                    $steps["updateProjectType"] = await $steps[
                      "updateProjectType"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              value={"filmProjects"}
            />

            <Checkbox
              data-plasmic-name={"option3"}
              data-plasmic-override={overrides.option3}
              className={classNames("__wab_instance", sty.option3)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vPvq
                  )}
                >
                  {"VRChat"}
                </div>
              }
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "option3",
                  "isSelected"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["updateProjectType"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "projectType",
                          operation: 3,
                          value: "vrChat"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          let activeVariants = $stateGet($state, vgroup) ?? [];
                          if (typeof activeVariants === "string") {
                            activeVariants = [activeVariants];
                          }
                          for (const variant of value) {
                            if (activeVariants.includes(variant)) {
                              activeVariants.splice(
                                activeVariants.indexOf(variant),
                                1
                              );
                            } else {
                              activeVariants.push(variant);
                            }
                          }
                          $stateSet($state, vgroup, activeVariants);
                          return activeVariants;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProjectType"] != null &&
                    typeof $steps["updateProjectType"] === "object" &&
                    typeof $steps["updateProjectType"].then === "function"
                  ) {
                    $steps["updateProjectType"] = await $steps[
                      "updateProjectType"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              value={"filmProjects"}
            />

            <Checkbox
              data-plasmic-name={"option4"}
              data-plasmic-override={overrides.option4}
              className={classNames("__wab_instance", sty.option4)}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pXg7
                  )}
                >
                  {"Blender"}
                </div>
              }
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "option4",
                  "isSelected"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async val => {
                  const $steps = {};

                  $steps["updateProjectType"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: "projectType",
                          operation: 3,
                          value: "blender"
                        };
                        return (({ vgroup, value }) => {
                          if (typeof value === "string") {
                            value = [value];
                          }

                          let activeVariants = $stateGet($state, vgroup) ?? [];
                          if (typeof activeVariants === "string") {
                            activeVariants = [activeVariants];
                          }
                          for (const variant of value) {
                            if (activeVariants.includes(variant)) {
                              activeVariants.splice(
                                activeVariants.indexOf(variant),
                                1
                              );
                            } else {
                              activeVariants.push(variant);
                            }
                          }
                          $stateSet($state, vgroup, activeVariants);
                          return activeVariants;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateProjectType"] != null &&
                    typeof $steps["updateProjectType"] === "object" &&
                    typeof $steps["updateProjectType"].then === "function"
                  ) {
                    $steps["updateProjectType"] = await $steps[
                      "updateProjectType"
                    ];
                  }
                }).apply(null, eventArgs);
              }}
              value={"filmProjects"}
            />
          </Stack__>
        }
        showDescription={false}
      />

      <div
        className={classNames(projectcss.all, sty.columns__z0BmF, {
          [sty.columnsprojectType_unity__z0BmFNjRr]: hasVariant(
            $state,
            "projectType",
            "unity"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.column__iL8EE)}>
          <Polaroid
            data-plasmic-name={"bugTaxi"}
            data-plasmic-override={overrides.bugTaxi}
            back2={true}
            backHeader1={"Skills Used:"}
            className={classNames("__wab_instance", sty.bugTaxi)}
            infoPage={`/BugTaxi`}
            projectTitle={"Bug Taxi!"}
            slot={
              <React.Fragment>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__qcdAf
                  )}
                >
                  {"Unity"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__ho5Hs
                  )}
                >
                  {"Blender"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__bRi2X
                  )}
                >
                  {"Arduino"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__yXRhy
                  )}
                >
                  {"C#"}
                </li>
              </React.Fragment>
            }
          >
            <PlasmicImg__
              data-plasmic-name={"mochaccinoCoverPhoto"}
              data-plasmic-override={overrides.mochaccinoCoverPhoto}
              alt={""}
              className={classNames(sty.mochaccinoCoverPhoto)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/bugTaxiPosterJpg.jpg",
                fullWidth: 2550,
                fullHeight: 3300,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__ikohT)}>
          <VhsTape
            background={
              <React.Fragment>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__g0ARy)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liz_website/images/screenshot20250223170857Png.png",
                    fullWidth: 1558,
                    fullHeight: 985,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___7MuFz)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liz_website/images/image14.png",
                    fullWidth: 540,
                    fullHeight: 360,
                    aspectRatio: undefined
                  }}
                />
              </React.Fragment>
            }
            className={classNames("__wab_instance", sty.vhsTape__xZ5I8)}
            filmTitle={"Introspection"}
            year={"2024"}
          >
            {"Directed by Liz  Manz\nVFX + Music by Angelo Licavoli"}
          </VhsTape>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.columns__pdpGt, {
          [sty.columnsprojectType_unity__pdpGtNjRr]: hasVariant(
            $state,
            "projectType",
            "unity"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.column__crWri)}>
          <VhsTape
            background={
              <React.Fragment>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__z8Bb1)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liz_website/images/screenshot20250319154117Png.png",
                    fullWidth: 1906,
                    fullHeight: 1015,
                    aspectRatio: undefined
                  }}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___74TUg)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liz_website/images/image14.png",
                    fullWidth: 540,
                    fullHeight: 360,
                    aspectRatio: undefined
                  }}
                />
              </React.Fragment>
            }
            className={classNames("__wab_instance", sty.vhsTape__otzjR)}
            filmTitle={"Disuko"}
            year={"2024"}
          >
            {"Directed by Liz  Manz"}
          </VhsTape>
        </div>
        <div className={classNames(projectcss.all, sty.column__oWo6K)}>
          <Polaroid
            data-plasmic-name={"theHoneysong"}
            data-plasmic-override={overrides.theHoneysong}
            backHeader1={"Skills Used:"}
            className={classNames("__wab_instance", sty.theHoneysong, {
              [sty.theHoneysongprojectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.theHoneysongprojectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.theHoneysongprojectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              ),
              [sty.theHoneysongprojectType_vrChat]: hasVariant(
                $state,
                "projectType",
                "vrChat"
              )
            })}
            date2={"2025"}
            infoPage={"https://www.instagram.com/p/DIE7iPCRJjE/?img_index=4"}
            projectTitle={"The Honeysong"}
            slot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aj3N3
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <ul
                      data-plasmic-name={"ul"}
                      data-plasmic-override={overrides.ul}
                      className={classNames(
                        projectcss.all,
                        projectcss.ul,
                        sty.ul
                      )}
                    >
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li___9U1Kn
                        )}
                      >
                        {"Blender"}
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li__u9CcE
                        )}
                      >
                        {"Photoshop"}
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li__wkt2A
                        )}
                      >
                        {"Adobe Premiere"}
                      </li>
                    </ul>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            }
          >
            <div className={classNames(projectcss.all, sty.freeBox___72AvA)}>
              <PlasmicImg__
                data-plasmic-name={"honeysongCoverPhoto"}
                data-plasmic-override={overrides.honeysongCoverPhoto}
                alt={""}
                className={classNames(sty.honeysongCoverPhoto)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/liz_website/images/image15.png",
                  fullWidth: 690,
                  fullHeight: 863,
                  aspectRatio: undefined
                }}
              />
            </div>
          </Polaroid>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.columns__hwsK4, {
          [sty.columnsprojectType_unity__hwsK4NjRr]: hasVariant(
            $state,
            "projectType",
            "unity"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.column__zYcru)}>
          <Polaroid
            data-plasmic-name={"pieceAShit"}
            data-plasmic-override={overrides.pieceAShit}
            backHeader1={"Skills Used:"}
            className={classNames("__wab_instance", sty.pieceAShit, {
              [sty.pieceAShitprojectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.pieceAShitprojectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.pieceAShitprojectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              ),
              [sty.pieceAShitprojectType_vrChat]: hasVariant(
                $state,
                "projectType",
                "vrChat"
              )
            })}
            date2={"2024"}
            infoPage={`/DrinkRender`}
            projectTitle={"Piece a Shit"}
            slot={
              <React.Fragment>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li___62Fnl
                  )}
                >
                  {"Unity"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__b3Rkc
                  )}
                >
                  {"Blender"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li___8RjW
                  )}
                >
                  {"Meta XR SDK"}
                </li>
              </React.Fragment>
            }
          >
            <PlasmicImg__
              data-plasmic-name={"pieceAShitCoverPhoto"}
              data-plasmic-override={overrides.pieceAShitCoverPhoto}
              alt={""}
              className={classNames(sty.pieceAShitCoverPhoto, {
                [sty.pieceAShitCoverPhotoprojectType_unity]: hasVariant(
                  $state,
                  "projectType",
                  "unity"
                )
              })}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/screenshot20250225164249Png.png",
                fullWidth: 1585,
                fullHeight: 802,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__fP0Bd)}>
          <Polaroid
            data-plasmic-name={"drinkRender"}
            data-plasmic-override={overrides.drinkRender}
            backHeader1={"Skills Used:"}
            className={classNames("__wab_instance", sty.drinkRender, {
              [sty.drinkRenderprojectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.drinkRenderprojectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.drinkRenderprojectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              ),
              [sty.drinkRenderprojectType_vrChat]: hasVariant(
                $state,
                "projectType",
                "vrChat"
              )
            })}
            date2={"2024"}
            infoPage={`/DrinkRender`}
            projectTitle={"Drink Render"}
            slot={
              <li
                className={classNames(
                  projectcss.all,
                  projectcss.li,
                  projectcss.__wab_text,
                  sty.li__gFZ
                )}
              >
                {"Blender"}
              </li>
            }
          >
            <PlasmicImg__
              data-plasmic-name={"drinkRenderCoverPhoto"}
              data-plasmic-override={overrides.drinkRenderCoverPhoto}
              alt={""}
              className={classNames(sty.drinkRenderCoverPhoto)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/latteGif.gif",
                fullWidth: 600,
                fullHeight: 600,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__jvz88)}>
          <Polaroid
            data-plasmic-name={"mochaccino"}
            data-plasmic-override={overrides.mochaccino}
            backHeader1={"Skills Used:"}
            className={classNames("__wab_instance", sty.mochaccino, {
              [sty.mochaccinoprojectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.mochaccinoprojectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.mochaccinoprojectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              )
            })}
            date2={"2024"}
            infoPage={`/Mochaccino`}
            projectTitle={"Mochaccino"}
            slot={
              <React.Fragment>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__dvun7
                  )}
                >
                  {"Unity"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__t0MkD
                  )}
                >
                  {"Blender"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__dlVb1
                  )}
                >
                  {"Substance Painter"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__xrHWz
                  )}
                >
                  {"VRChat SDK"}
                </li>
              </React.Fragment>
            }
          >
            <PlasmicImg__
              data-plasmic-name={"mochaccinoCoverPhoto2"}
              data-plasmic-override={overrides.mochaccinoCoverPhoto2}
              alt={""}
              className={classNames(sty.mochaccinoCoverPhoto2)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/image9.png",
                fullWidth: 2560,
                fullHeight: 1440,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.columns__wwKzh)}>
        <div className={classNames(projectcss.all, sty.column__gCyR)}>
          <Polaroid
            data-plasmic-name={"astro"}
            data-plasmic-override={overrides.astro}
            backHeader1={"Skills Used:"}
            className={classNames("__wab_instance", sty.astro, {
              [sty.astroprojectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.astroprojectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              )
            })}
            date2={"2023"}
            infoPage={`/Astro`}
            projectTitle={"Astro"}
            slot={
              <React.Fragment>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__pA3AG
                  )}
                >
                  {"Unity"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__kt7DB
                  )}
                >
                  {"Blender"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__zKwC5
                  )}
                >
                  {"Substance Painter"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__l0RTb
                  )}
                >
                  {"VRChat SDK"}
                </li>
              </React.Fragment>
            }
          >
            <PlasmicImg__
              data-plasmic-name={"astroCoverPhoto"}
              data-plasmic-override={overrides.astroCoverPhoto}
              alt={""}
              className={classNames(sty.astroCoverPhoto, {
                [sty.astroCoverPhotoprojectType_blender]: hasVariant(
                  $state,
                  "projectType",
                  "blender"
                )
              })}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/image10.png",
                fullWidth: 214,
                fullHeight: 381,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__gtFj)}>
          <Polaroid
            data-plasmic-name={"aerie"}
            data-plasmic-override={overrides.aerie}
            backHeader1={"Skills Used:"}
            className={classNames("__wab_instance", sty.aerie, {
              [sty.aerieprojectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.aerieprojectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              )
            })}
            date2={"2023"}
            infoPage={`/Aerie`}
            projectTitle={"Aerie"}
            slot={
              <React.Fragment>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__jhZrb
                  )}
                >
                  {"Unity"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__cGqcF
                  )}
                >
                  {"Blender"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__giRqZ
                  )}
                >
                  {"Substance Painter"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__lg55X
                  )}
                >
                  {"VRChat SDK"}
                </li>
              </React.Fragment>
            }
          >
            <PlasmicImg__
              data-plasmic-name={"aerieCoverPhoto"}
              data-plasmic-override={overrides.aerieCoverPhoto}
              alt={""}
              className={classNames(sty.aerieCoverPhoto, {
                [sty.aerieCoverPhotoprojectType_blender]: hasVariant(
                  $state,
                  "projectType",
                  "blender"
                )
              })}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/vrChat202401141510409523840X2160Webp.webp",
                fullWidth: 214,
                fullHeight: 381,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column___6LLa)}>
          <Polaroid
            data-plasmic-name={"sugarVer2"}
            data-plasmic-override={overrides.sugarVer2}
            backHeader1={"Skills Used:"}
            className={classNames("__wab_instance", sty.sugarVer2, {
              [sty.sugarVer2projectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.sugarVer2projectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.sugarVer2projectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              )
            })}
            date2={"2023"}
            infoPage={`/SugarV2`}
            projectTitle={"Sugar Ver. 2"}
            slot={
              <React.Fragment>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__eQs4R
                  )}
                >
                  {"Unity"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__rwqOg
                  )}
                >
                  {"Substance Painter"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__vuwde
                  )}
                >
                  {"VRChat SDK"}
                </li>
              </React.Fragment>
            }
          >
            <PlasmicImg__
              data-plasmic-name={"sugarCoverPhoto"}
              data-plasmic-override={overrides.sugarCoverPhoto}
              alt={""}
              className={classNames(sty.sugarCoverPhoto)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/vrChat20230808230323Png.png",
                fullWidth: 719,
                fullHeight: 404,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.columns__iVP9, {
          [sty.columnsprojectType_unity__iVP9NjRr]: hasVariant(
            $state,
            "projectType",
            "unity"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.column__glc00)}>
          <Polaroid
            data-plasmic-name={"queenie"}
            data-plasmic-override={overrides.queenie}
            backHeader1={"Skills Used:"}
            className={classNames("__wab_instance", sty.queenie, {
              [sty.queenieprojectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.queenieprojectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.queenieprojectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              )
            })}
            date2={"2022"}
            infoPage={`/Queenie`}
            projectTitle={"Queenie"}
            slot={
              <React.Fragment>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__ghEo
                  )}
                >
                  {"Unity"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__wdEsg
                  )}
                >
                  {"Substance Painter"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__m7Nqh
                  )}
                >
                  {"VRChat SDK"}
                </li>
              </React.Fragment>
            }
          >
            <PlasmicImg__
              data-plasmic-name={"queenieCoverPhoto"}
              data-plasmic-override={overrides.queenieCoverPhoto}
              alt={""}
              className={classNames(sty.queenieCoverPhoto)}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/vrChat20230521144825Png.png",
                fullWidth: 719,
                fullHeight: 404,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__ymYep)}>
          <Polaroid
            data-plasmic-name={"sugarVer1"}
            data-plasmic-override={overrides.sugarVer1}
            backHeader1={"Skills Used:"}
            className={classNames("__wab_instance", sty.sugarVer1, {
              [sty.sugarVer1projectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.sugarVer1projectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.sugarVer1projectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              )
            })}
            date2={"2022"}
            infoPage={`/SugarV1`}
            projectTitle={"Sugar Ver. 1"}
            slot={
              <React.Fragment>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__qapZt
                  )}
                >
                  {"Unity"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__p2H1N
                  )}
                >
                  {"Substance Painter"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__arex
                  )}
                >
                  {"VRChat SDK"}
                </li>
              </React.Fragment>
            }
          >
            <PlasmicImg__
              data-plasmic-name={"sugarVer1CoverPhoto"}
              data-plasmic-override={overrides.sugarVer1CoverPhoto}
              alt={""}
              className={classNames(sty.sugarVer1CoverPhoto, {
                [sty.sugarVer1CoverPhotoprojectType_fIlm]: hasVariant(
                  $state,
                  "projectType",
                  "fIlm"
                )
              })}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/vrChat20230425195355Png.png",
                fullWidth: 338,
                fullHeight: 601,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
        <div className={classNames(projectcss.all, sty.column__qJlyj)}>
          <Polaroid
            data-plasmic-name={"bee"}
            data-plasmic-override={overrides.bee}
            backHeader1={"Skills Used:"}
            className={classNames("__wab_instance", sty.bee, {
              [sty.beeprojectType_blender]: hasVariant(
                $state,
                "projectType",
                "blender"
              ),
              [sty.beeprojectType_fIlm]: hasVariant(
                $state,
                "projectType",
                "fIlm"
              ),
              [sty.beeprojectType_unity]: hasVariant(
                $state,
                "projectType",
                "unity"
              )
            })}
            date2={"2022"}
            infoPage={`/Bee`}
            projectTitle={"Bee"}
            slot={
              <React.Fragment>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__gv5Y1
                  )}
                >
                  {"Unity"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__rcWdg
                  )}
                >
                  {"Substance Painter"}
                </li>
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__dtQrv
                  )}
                >
                  {"VRChat SDK"}
                </li>
              </React.Fragment>
            }
          >
            <PlasmicImg__
              data-plasmic-name={"beeCoverPhoto"}
              data-plasmic-override={overrides.beeCoverPhoto}
              alt={""}
              className={classNames(sty.beeCoverPhoto, {
                [sty.beeCoverPhotoprojectType_fIlm]: hasVariant(
                  $state,
                  "projectType",
                  "fIlm"
                )
              })}
              displayHeight={"100%"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/vrChat202401141525565852160X3840Png.png",
                fullWidth: 2160,
                fullHeight: 3840,
                aspectRatio: undefined
              }}
            />
          </Polaroid>
        </div>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  pinboard: [
    "pinboard",
    "checkboxGroup",
    "option1",
    "option2",
    "option3",
    "option4",
    "bugTaxi",
    "mochaccinoCoverPhoto",
    "theHoneysong",
    "honeysongCoverPhoto",
    "ul",
    "pieceAShit",
    "pieceAShitCoverPhoto",
    "drinkRender",
    "drinkRenderCoverPhoto",
    "mochaccino",
    "mochaccinoCoverPhoto2",
    "astro",
    "astroCoverPhoto",
    "aerie",
    "aerieCoverPhoto",
    "sugarVer2",
    "sugarCoverPhoto",
    "queenie",
    "queenieCoverPhoto",
    "sugarVer1",
    "sugarVer1CoverPhoto",
    "bee",
    "beeCoverPhoto"
  ],
  checkboxGroup: ["checkboxGroup", "option1", "option2", "option3", "option4"],
  option1: ["option1"],
  option2: ["option2"],
  option3: ["option3"],
  option4: ["option4"],
  bugTaxi: ["bugTaxi", "mochaccinoCoverPhoto"],
  mochaccinoCoverPhoto: ["mochaccinoCoverPhoto"],
  theHoneysong: ["theHoneysong", "honeysongCoverPhoto", "ul"],
  honeysongCoverPhoto: ["honeysongCoverPhoto"],
  ul: ["ul"],
  pieceAShit: ["pieceAShit", "pieceAShitCoverPhoto"],
  pieceAShitCoverPhoto: ["pieceAShitCoverPhoto"],
  drinkRender: ["drinkRender", "drinkRenderCoverPhoto"],
  drinkRenderCoverPhoto: ["drinkRenderCoverPhoto"],
  mochaccino: ["mochaccino", "mochaccinoCoverPhoto2"],
  mochaccinoCoverPhoto2: ["mochaccinoCoverPhoto2"],
  astro: ["astro", "astroCoverPhoto"],
  astroCoverPhoto: ["astroCoverPhoto"],
  aerie: ["aerie", "aerieCoverPhoto"],
  aerieCoverPhoto: ["aerieCoverPhoto"],
  sugarVer2: ["sugarVer2", "sugarCoverPhoto"],
  sugarCoverPhoto: ["sugarCoverPhoto"],
  queenie: ["queenie", "queenieCoverPhoto"],
  queenieCoverPhoto: ["queenieCoverPhoto"],
  sugarVer1: ["sugarVer1", "sugarVer1CoverPhoto"],
  sugarVer1CoverPhoto: ["sugarVer1CoverPhoto"],
  bee: ["bee", "beeCoverPhoto"],
  beeCoverPhoto: ["beeCoverPhoto"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  pinboard: "div";
  checkboxGroup: typeof CheckboxGroup;
  option1: typeof Checkbox;
  option2: typeof Checkbox;
  option3: typeof Checkbox;
  option4: typeof Checkbox;
  bugTaxi: typeof Polaroid;
  mochaccinoCoverPhoto: typeof PlasmicImg__;
  theHoneysong: typeof Polaroid;
  honeysongCoverPhoto: typeof PlasmicImg__;
  ul: "ul";
  pieceAShit: typeof Polaroid;
  pieceAShitCoverPhoto: typeof PlasmicImg__;
  drinkRender: typeof Polaroid;
  drinkRenderCoverPhoto: typeof PlasmicImg__;
  mochaccino: typeof Polaroid;
  mochaccinoCoverPhoto2: typeof PlasmicImg__;
  astro: typeof Polaroid;
  astroCoverPhoto: typeof PlasmicImg__;
  aerie: typeof Polaroid;
  aerieCoverPhoto: typeof PlasmicImg__;
  sugarVer2: typeof Polaroid;
  sugarCoverPhoto: typeof PlasmicImg__;
  queenie: typeof Polaroid;
  queenieCoverPhoto: typeof PlasmicImg__;
  sugarVer1: typeof Polaroid;
  sugarVer1CoverPhoto: typeof PlasmicImg__;
  bee: typeof Polaroid;
  beeCoverPhoto: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPinboard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPinboard__VariantsArgs;
    args?: PlasmicPinboard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPinboard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPinboard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPinboard__ArgProps,
          internalVariantPropNames: PlasmicPinboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPinboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "pinboard") {
    func.displayName = "PlasmicPinboard";
  } else {
    func.displayName = `PlasmicPinboard.${nodeName}`;
  }
  return func;
}

export const PlasmicPinboard = Object.assign(
  // Top-level PlasmicPinboard renders the root element
  makeNodeComponent("pinboard"),
  {
    // Helper components rendering sub-elements
    checkboxGroup: makeNodeComponent("checkboxGroup"),
    option1: makeNodeComponent("option1"),
    option2: makeNodeComponent("option2"),
    option3: makeNodeComponent("option3"),
    option4: makeNodeComponent("option4"),
    bugTaxi: makeNodeComponent("bugTaxi"),
    mochaccinoCoverPhoto: makeNodeComponent("mochaccinoCoverPhoto"),
    theHoneysong: makeNodeComponent("theHoneysong"),
    honeysongCoverPhoto: makeNodeComponent("honeysongCoverPhoto"),
    ul: makeNodeComponent("ul"),
    pieceAShit: makeNodeComponent("pieceAShit"),
    pieceAShitCoverPhoto: makeNodeComponent("pieceAShitCoverPhoto"),
    drinkRender: makeNodeComponent("drinkRender"),
    drinkRenderCoverPhoto: makeNodeComponent("drinkRenderCoverPhoto"),
    mochaccino: makeNodeComponent("mochaccino"),
    mochaccinoCoverPhoto2: makeNodeComponent("mochaccinoCoverPhoto2"),
    astro: makeNodeComponent("astro"),
    astroCoverPhoto: makeNodeComponent("astroCoverPhoto"),
    aerie: makeNodeComponent("aerie"),
    aerieCoverPhoto: makeNodeComponent("aerieCoverPhoto"),
    sugarVer2: makeNodeComponent("sugarVer2"),
    sugarCoverPhoto: makeNodeComponent("sugarCoverPhoto"),
    queenie: makeNodeComponent("queenie"),
    queenieCoverPhoto: makeNodeComponent("queenieCoverPhoto"),
    sugarVer1: makeNodeComponent("sugarVer1"),
    sugarVer1CoverPhoto: makeNodeComponent("sugarVer1CoverPhoto"),
    bee: makeNodeComponent("bee"),
    beeCoverPhoto: makeNodeComponent("beeCoverPhoto"),

    // Metadata about props expected for PlasmicPinboard
    internalVariantProps: PlasmicPinboard__VariantProps,
    internalArgProps: PlasmicPinboard__ArgProps
  }
);

export default PlasmicPinboard;
/* prettier-ignore-end */
