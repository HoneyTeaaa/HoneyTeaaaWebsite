// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pqbSBZb9VG36A9gA4GgWPg
// Component: SGzL5zPyMcua

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PolaroidButton from "../../PolaroidButton"; // plasmic-import: kgn-9fRoQ8T7/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: pqbSBZb9VG36A9gA4GgWPg/projectcss
import sty from "./PlasmicPolaroid.module.css"; // plasmic-import: SGzL5zPyMcua/css

createPlasmicElementProxy;

export type PlasmicPolaroid__VariantMembers = {
  back2: "back2";
};
export type PlasmicPolaroid__VariantsArgs = {
  back2?: SingleBooleanChoiceArg<"back2">;
};
type VariantPropType = keyof PlasmicPolaroid__VariantsArgs;
export const PlasmicPolaroid__VariantProps = new Array<VariantPropType>(
  "back2"
);

export type PlasmicPolaroid__ArgsType = {
  projectTitle?: string;
  date2?: string;
  backHeader1?: string;
  infoPage?: string;
  slot?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPolaroid__ArgsType;
export const PlasmicPolaroid__ArgProps = new Array<ArgPropType>(
  "projectTitle",
  "date2",
  "backHeader1",
  "infoPage",
  "slot",
  "children"
);

export type PlasmicPolaroid__OverridesType = {
  root?: Flex__<"div">;
  polaroidBack?: Flex__<"div">;
  back?: Flex__<"div">;
  projectNameReminder?: Flex__<"div">;
  backTitle?: Flex__<"div">;
  backinfo?: Flex__<"div">;
  polaroidButton?: Flex__<typeof PolaroidButton>;
  polaroidFront?: Flex__<"div">;
  front?: Flex__<"div">;
  projectName?: Flex__<"div">;
  date?: Flex__<"div">;
};

export interface DefaultPolaroidProps {
  projectTitle?: string;
  date2?: string;
  backHeader1?: string;
  infoPage?: string;
  slot?: React.ReactNode;
  children?: React.ReactNode;
  back2?: SingleBooleanChoiceArg<"back2">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPolaroid__RenderFunc(props: {
  variants: PlasmicPolaroid__VariantsArgs;
  args: PlasmicPolaroid__ArgsType;
  overrides: PlasmicPolaroid__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          projectTitle: "Project Title",
          date2: "2025",
          backHeader1: "Detail Header 1",
          infoPage: `/portfolio`
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isFlippped",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "back2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.back2
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootback2]: hasVariant($state, "back2", "back2") }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"polaroidBack"}
        data-plasmic-override={overrides.polaroidBack}
        hasGap={true}
        className={classNames(projectcss.all, sty.polaroidBack, {
          [sty.polaroidBackback2]: hasVariant($state, "back2", "back2")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateFlipped"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isFlippped"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateFlipped"] != null &&
            typeof $steps["updateFlipped"] === "object" &&
            typeof $steps["updateFlipped"].then === "function"
          ) {
            $steps["updateFlipped"] = await $steps["updateFlipped"];
          }

          $steps["updateBack2"] = true
            ? (() => {
                const actionArgs = { vgroup: "back2", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateBack2"] != null &&
            typeof $steps["updateBack2"] === "object" &&
            typeof $steps["updateBack2"].then === "function"
          ) {
            $steps["updateBack2"] = await $steps["updateBack2"];
          }
        }}
      >
        <div
          data-plasmic-name={"back"}
          data-plasmic-override={overrides.back}
          className={classNames(projectcss.all, sty.back, {
            [sty.backback2]: hasVariant($state, "back2", "back2")
          })}
        >
          <div
            data-plasmic-name={"projectNameReminder"}
            data-plasmic-override={overrides.projectNameReminder}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.projectNameReminder,
              {
                [sty.projectNameReminderback2]: hasVariant(
                  $state,
                  "back2",
                  "back2"
                )
              }
            )}
          >
            {hasVariant($state, "back2", "back2") ? (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.projectTitle;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            ) : (
              <React.Fragment>
                {(() => {
                  try {
                    return $props.projectTitle;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            )}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox___7B0Wt, {
              [sty.freeBoxback2___7B0Wt7Cft8]: hasVariant(
                $state,
                "back2",
                "back2"
              )
            })}
          >
            <div
              data-plasmic-name={"backTitle"}
              data-plasmic-override={overrides.backTitle}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.backTitle,
                { [sty.backTitleback2]: hasVariant($state, "back2", "back2") }
              )}
            >
              {hasVariant($state, "back2", "back2") ? (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.backHeader1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              ) : (
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.backHeader1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              )}
            </div>
            <div
              data-plasmic-name={"backinfo"}
              data-plasmic-override={overrides.backinfo}
              className={classNames(projectcss.all, sty.backinfo, {
                [sty.backinfoback2]: hasVariant($state, "back2", "back2")
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "details",
                value: args.slot,
                className: classNames(sty.slotTargetSlot, {
                  [sty.slotTargetSlotback2]: hasVariant(
                    $state,
                    "back2",
                    "back2"
                  )
                })
              })}
              <PolaroidButton
                data-plasmic-name={"polaroidButton"}
                data-plasmic-override={overrides.polaroidButton}
                back2={true}
                className={classNames("__wab_instance", sty.polaroidButton, {
                  [sty.polaroidButtonback2]: hasVariant(
                    $state,
                    "back2",
                    "back2"
                  )
                })}
                infoPage={(() => {
                  try {
                    return $props.infoPage;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return `/portfolio`;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          </div>
        </div>
      </Stack__>
      <Stack__
        as={"div"}
        data-plasmic-name={"polaroidFront"}
        data-plasmic-override={overrides.polaroidFront}
        hasGap={true}
        className={classNames(projectcss.all, sty.polaroidFront, {
          [sty.polaroidFrontback2]: hasVariant($state, "back2", "back2")
        })}
        onClick={async event => {
          const $steps = {};

          $steps["updateFlipped"] = true
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["isFlippped"]
                  },
                  operation: 4
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  const oldValue = $stateGet(objRoot, variablePath);
                  $stateSet(objRoot, variablePath, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateFlipped"] != null &&
            typeof $steps["updateFlipped"] === "object" &&
            typeof $steps["updateFlipped"].then === "function"
          ) {
            $steps["updateFlipped"] = await $steps["updateFlipped"];
          }

          $steps["updateBack2"] = true
            ? (() => {
                const actionArgs = { vgroup: "back2", operation: 2 };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateBack2"] != null &&
            typeof $steps["updateBack2"] === "object" &&
            typeof $steps["updateBack2"].then === "function"
          ) {
            $steps["updateBack2"] = await $steps["updateBack2"];
          }
        }}
      >
        <div
          data-plasmic-name={"front"}
          data-plasmic-override={overrides.front}
          className={classNames(projectcss.all, sty.front, {
            [sty.frontback2]: hasVariant($state, "back2", "back2")
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__t3E4A, {
              [sty.freeBoxback2__t3E4A7Cft8]: hasVariant(
                $state,
                "back2",
                "back2"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___8M9Vi)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/liz_website/images/image9.png",
                    fullWidth: 2560,
                    fullHeight: 1440,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.children
            })}
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__jjxIu, {
              [sty.freeBoxback2__jjxIu7Cft8]: hasVariant(
                $state,
                "back2",
                "back2"
              )
            })}
          >
            <div
              data-plasmic-name={"projectName"}
              data-plasmic-override={overrides.projectName}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.projectName
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.projectTitle;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              data-plasmic-name={"date"}
              data-plasmic-override={overrides.date}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.date
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.date2;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "2024";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "polaroidBack",
    "back",
    "projectNameReminder",
    "backTitle",
    "backinfo",
    "polaroidButton",
    "polaroidFront",
    "front",
    "projectName",
    "date"
  ],
  polaroidBack: [
    "polaroidBack",
    "back",
    "projectNameReminder",
    "backTitle",
    "backinfo",
    "polaroidButton"
  ],
  back: [
    "back",
    "projectNameReminder",
    "backTitle",
    "backinfo",
    "polaroidButton"
  ],
  projectNameReminder: ["projectNameReminder"],
  backTitle: ["backTitle"],
  backinfo: ["backinfo", "polaroidButton"],
  polaroidButton: ["polaroidButton"],
  polaroidFront: ["polaroidFront", "front", "projectName", "date"],
  front: ["front", "projectName", "date"],
  projectName: ["projectName"],
  date: ["date"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  polaroidBack: "div";
  back: "div";
  projectNameReminder: "div";
  backTitle: "div";
  backinfo: "div";
  polaroidButton: typeof PolaroidButton;
  polaroidFront: "div";
  front: "div";
  projectName: "div";
  date: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPolaroid__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPolaroid__VariantsArgs;
    args?: PlasmicPolaroid__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPolaroid__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPolaroid__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPolaroid__ArgProps,
          internalVariantPropNames: PlasmicPolaroid__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPolaroid__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPolaroid";
  } else {
    func.displayName = `PlasmicPolaroid.${nodeName}`;
  }
  return func;
}

export const PlasmicPolaroid = Object.assign(
  // Top-level PlasmicPolaroid renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    polaroidBack: makeNodeComponent("polaroidBack"),
    back: makeNodeComponent("back"),
    projectNameReminder: makeNodeComponent("projectNameReminder"),
    backTitle: makeNodeComponent("backTitle"),
    backinfo: makeNodeComponent("backinfo"),
    polaroidButton: makeNodeComponent("polaroidButton"),
    polaroidFront: makeNodeComponent("polaroidFront"),
    front: makeNodeComponent("front"),
    projectName: makeNodeComponent("projectName"),
    date: makeNodeComponent("date"),

    // Metadata about props expected for PlasmicPolaroid
    internalVariantProps: PlasmicPolaroid__VariantProps,
    internalArgProps: PlasmicPolaroid__ArgProps
  }
);

export default PlasmicPolaroid;
/* prettier-ignore-end */
