/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pqbSBZb9VG36A9gA4GgWPg
// Component: K7mQOjwyQOCq

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: tGuDlEY_p2-T/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Polaroid from "../../Polaroid"; // plasmic-import: SGzL5zPyMcua/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: pqbSBZb9VG36A9gA4GgWPg/projectcss
import sty from "./PlasmicSocials.module.css"; // plasmic-import: K7mQOjwyQOCq/css

createPlasmicElementProxy;

export type PlasmicSocials__VariantMembers = {};
export type PlasmicSocials__VariantsArgs = {};
type VariantPropType = keyof PlasmicSocials__VariantsArgs;
export const PlasmicSocials__VariantProps = new Array<VariantPropType>();

export type PlasmicSocials__ArgsType = {};
type ArgPropType = keyof PlasmicSocials__ArgsType;
export const PlasmicSocials__ArgProps = new Array<ArgPropType>();

export type PlasmicSocials__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  reveal?: Flex__<typeof Reveal>;
};

export interface DefaultSocialsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSocials__RenderFunc(props: {
  variants: PlasmicSocials__VariantsArgs;
  args: PlasmicSocials__ArgsType;
  overrides: PlasmicSocials__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            cascade={false}
            className={classNames("__wab_instance", sty.reveal)}
            triggerOnce={true}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__i2Ip9)}
            >
              <div className={classNames(projectcss.all, sty.column__lfsDj)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jfZi2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aekJa
                    )}
                  >
                    {"Social Media.*"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___06DOr
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic" }}
                      >
                        {"Idk i have social media man... "}
                      </span>
                    </React.Fragment>
                  </div>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__j9XN)}>
                <Polaroid
                  backHeader1={"Photo By:"}
                  className={classNames("__wab_instance", sty.polaroid__wPaTs)}
                  date2={``}
                  infoPage={"https://liamlyonsiv.myportfolio.com"}
                  projectTitle={``}
                  slot={"Liam Lyons"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__zx3Rj)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liz_website/images/vrChat202402232057448973840X2160Png.png",
                      fullWidth: 3840,
                      fullHeight: 2160,
                      aspectRatio: undefined
                    }}
                  />
                </Polaroid>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__vD5O)}
            >
              <div className={classNames(projectcss.all, sty.column__lwBcZ)}>
                <Polaroid
                  backHeader1={"Photo By:"}
                  className={classNames("__wab_instance", sty.polaroid__rYwov)}
                  date2={``}
                  infoPage={"https://www.disuko.gay"}
                  projectTitle={``}
                  slot={"Disuko"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ocHep)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liz_website/images/image2.png",
                      fullWidth: 1800,
                      fullHeight: 1200,
                      aspectRatio: undefined
                    }}
                  />
                </Polaroid>
              </div>
              <div className={classNames(projectcss.all, sty.column__gHaVk)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yKwy)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vWdN
                    )}
                  >
                    {"Bluesky.*"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kKLsO
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic" }}
                      >
                        {"Post photos here"}
                      </span>
                    </React.Fragment>
                  </div>
                </Stack__>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__j5M8B)}
            >
              <div className={classNames(projectcss.all, sty.column__ytx9T)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pw3Kl)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cu7X0
                    )}
                  >
                    {"Bluesky.*"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9L14Y
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic" }}
                      >
                        {"Post photos here"}
                      </span>
                    </React.Fragment>
                  </div>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__scHtM)}>
                <Polaroid
                  backHeader1={"Photo By:"}
                  className={classNames("__wab_instance", sty.polaroid__b0GbJ)}
                  date2={``}
                  infoPage={"https://www.disuko.gay"}
                  projectTitle={``}
                  slot={"Disuko"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__gAjab)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liz_website/images/image2.png",
                      fullWidth: 1800,
                      fullHeight: 1200,
                      aspectRatio: undefined
                    }}
                  />
                </Polaroid>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns___8CJ6)}
            >
              <div className={classNames(projectcss.all, sty.column__qepar)}>
                <Polaroid
                  backHeader1={"Photo By:"}
                  className={classNames("__wab_instance", sty.polaroid___1F1Fc)}
                  date2={``}
                  infoPage={"https://www.disuko.gay"}
                  projectTitle={``}
                  slot={"Disuko"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__xMojG)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liz_website/images/image4.png",
                      fullWidth: 1800,
                      fullHeight: 1200,
                      aspectRatio: undefined
                    }}
                  />
                </Polaroid>
              </div>
              <div className={classNames(projectcss.all, sty.column__ohfhE)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fDniv)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zlOv
                    )}
                  >
                    {"TikTok.*"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___93TMr
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic" }}
                      >
                        {"Short Form Content here"}
                      </span>
                    </React.Fragment>
                  </div>
                </Stack__>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__z1Fs)}
            >
              <div className={classNames(projectcss.all, sty.column__rZtc4)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___9MmeW)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4XuDx
                    )}
                  >
                    {"YouTube.*"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__odxFj
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic" }}
                      >
                        {"Long form content goes here"}
                      </span>
                    </React.Fragment>
                  </div>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__a37Cx)}>
                <Polaroid
                  backHeader1={"Photo By:"}
                  className={classNames("__wab_instance", sty.polaroid___3SpTu)}
                  date2={``}
                  infoPage={"https://www.disuko.gay"}
                  projectTitle={``}
                  slot={"Disuko"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__q44Xk)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liz_website/images/honeyTeaaaBackgroundPng.png",
                      fullWidth: 2400,
                      fullHeight: 1600,
                      aspectRatio: undefined
                    }}
                  />
                </Polaroid>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__aitht)}
            >
              <div className={classNames(projectcss.all, sty.column__mUo6E)}>
                <Polaroid
                  backHeader1={"Photo By:"}
                  className={classNames("__wab_instance", sty.polaroid__mdNI)}
                  date2={``}
                  infoPage={"https://www.disuko.gay"}
                  projectTitle={``}
                  slot={"Disuko"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__mQw3)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liz_website/images/dc589Be88A545761152E5D2D632B0261Jpg.jpg",
                      fullWidth: 400,
                      fullHeight: 600,
                      aspectRatio: undefined
                    }}
                  />
                </Polaroid>
              </div>
              <div className={classNames(projectcss.all, sty.column__tbEp1)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__f6U6P)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uHf2S
                    )}
                  >
                    {"Instagram.*"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yibWh
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic" }}
                      >
                        {"Balisong stuff goes here"}
                      </span>
                    </React.Fragment>
                  </div>
                </Stack__>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__ere48)}
            >
              <div className={classNames(projectcss.all, sty.column__ptjwZ)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tdQvg)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f62K6
                    )}
                  >
                    {"VRChat Group.*"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___64HzO
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontStyle: "italic" }}
                      >
                        {"Pretty much inactive, but here it is :O"}
                      </span>
                    </React.Fragment>
                  </div>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column___2Xy3A)}>
                <Polaroid
                  backHeader1={"Photo By:"}
                  className={classNames("__wab_instance", sty.polaroid__dEksw)}
                  date2={``}
                  infoPage={"https://www.disuko.gay"}
                  projectTitle={``}
                  slot={"Disuko"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__d7ZPw)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/liz_website/images/image6.png",
                      fullWidth: 1800,
                      fullHeight: 1200,
                      aspectRatio: undefined
                    }}
                  />
                </Polaroid>
              </div>
            </Stack__>
          </Reveal>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "reveal"],
  navbar: ["navbar"],
  reveal: ["reveal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  reveal: typeof Reveal;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocials__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocials__VariantsArgs;
    args?: PlasmicSocials__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSocials__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSocials__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSocials__ArgProps,
          internalVariantPropNames: PlasmicSocials__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSocials__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocials";
  } else {
    func.displayName = `PlasmicSocials.${nodeName}`;
  }
  return func;
}

export const PlasmicSocials = Object.assign(
  // Top-level PlasmicSocials renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    reveal: makeNodeComponent("reveal"),

    // Metadata about props expected for PlasmicSocials
    internalVariantProps: PlasmicSocials__VariantProps,
    internalArgProps: PlasmicSocials__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSocials;
/* prettier-ignore-end */
