// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pqbSBZb9VG36A9gA4GgWPg
// Component: dtNchHOzLhpw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import EnterButton from "../../EnterButton"; // plasmic-import: jIq4Q7LVWtnB/component

import { useScreenVariants as useScreenVariants_2JO3KfG3GnTq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2jO3kfG3gnTq/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: pqbSBZb9VG36A9gA4GgWPg/projectcss
import sty from "./PlasmicStartPage.module.css"; // plasmic-import: dtNchHOzLhpw/css

createPlasmicElementProxy;

export type PlasmicStartPage__VariantMembers = {};
export type PlasmicStartPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicStartPage__VariantsArgs;
export const PlasmicStartPage__VariantProps = new Array<VariantPropType>();

export type PlasmicStartPage__ArgsType = {};
type ArgPropType = keyof PlasmicStartPage__ArgsType;
export const PlasmicStartPage__ArgProps = new Array<ArgPropType>();

export type PlasmicStartPage__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  enterButton?: Flex__<typeof EnterButton>;
};

export interface DefaultStartPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStartPage__RenderFunc(props: {
  variants: PlasmicStartPage__VariantsArgs;
  args: PlasmicStartPage__ArgsType;
  overrides: PlasmicStartPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2JO3KfG3GnTq()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__nxIwS)}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: "/plasmic/liz_website/images/ezgifComWebpMakerWebp.webp",
            fullWidth: 768,
            fullHeight: 1024,
            aspectRatio: undefined
          }}
        />

        <section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ktIHs
            )}
          >
            {"Welcome to my webpage!"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pyq0P
            )}
          >
            {
              "I'm Tea, an amateur 3D artist and full time college student. I make art, mainly for VrChat, to learn new skills!"
            }
          </div>
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__dg3Hv)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: "/plasmic/liz_website/images/image7.png",
              fullWidth: 1195,
              fullHeight: 670,
              aspectRatio: undefined
            }}
          />

          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___8Lko
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__m8C)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "100%"
                  : "20%"
              }
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/liz_website/images/honeyteaaLogoMonospacedPng.png",
                fullWidth: 1920,
                fullHeight: 768,
                aspectRatio: undefined
              }}
            />
          </PlasmicLink__>
        </section>
        <div className={classNames(projectcss.all, sty.freeBox__y2AP)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link___4KkCp
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            {">Home.*"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__ii1NP
            )}
            component={Link}
            platform={"nextjs"}
          >
            {">About Me.*"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link___6ERzm
            )}
            component={Link}
            platform={"nextjs"}
          >
            {">Portfolio.*"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__watvw
            )}
            component={Link}
            href={`/socials`}
            platform={"nextjs"}
          >
            {">Socials.*"}
          </PlasmicLink__>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox___40Vx)}
          onClick={async event => {
            const $steps = {};

            $steps["runCode"] = true
              ? (() => {
                  const actionArgs = {
                    customFunction: async () => {
                      return (() => {
                        return setTimeout(() => {
                          window.location.href = "/home";
                        }, 500);
                      })();
                    }
                  };
                  return (({ customFunction }) => {
                    return customFunction();
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runCode"] != null &&
              typeof $steps["runCode"] === "object" &&
              typeof $steps["runCode"].then === "function"
            ) {
              $steps["runCode"] = await $steps["runCode"];
            }
          }}
        >
          <EnterButton
            data-plasmic-name={"enterButton"}
            data-plasmic-override={overrides.enterButton}
            className={classNames("__wab_instance", sty.enterButton)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section", "enterButton"],
  section: ["section"],
  enterButton: ["enterButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  enterButton: typeof EnterButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStartPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStartPage__VariantsArgs;
    args?: PlasmicStartPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStartPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStartPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStartPage__ArgProps,
          internalVariantPropNames: PlasmicStartPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStartPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStartPage";
  } else {
    func.displayName = `PlasmicStartPage.${nodeName}`;
  }
  return func;
}

export const PlasmicStartPage = Object.assign(
  // Top-level PlasmicStartPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    enterButton: makeNodeComponent("enterButton"),

    // Metadata about props expected for PlasmicStartPage
    internalVariantProps: PlasmicStartPage__VariantProps,
    internalArgProps: PlasmicStartPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicStartPage;
/* prettier-ignore-end */
