/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pqbSBZb9VG36A9gA4GgWPg
// Component: 5Va_uZjqlW_m

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: tGuDlEY_p2-T/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: pqbSBZb9VG36A9gA4GgWPg/projectcss
import sty from "./PlasmicTemplate.module.css"; // plasmic-import: 5Va_uZjqlW_m/css

createPlasmicElementProxy;

export type PlasmicTemplate__VariantMembers = {};
export type PlasmicTemplate__VariantsArgs = {};
type VariantPropType = keyof PlasmicTemplate__VariantsArgs;
export const PlasmicTemplate__VariantProps = new Array<VariantPropType>();

export type PlasmicTemplate__ArgsType = {};
type ArgPropType = keyof PlasmicTemplate__ArgsType;
export const PlasmicTemplate__ArgProps = new Array<ArgPropType>();

export type PlasmicTemplate__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  reveal?: Flex__<typeof Reveal>;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
};

export interface DefaultTemplateProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTemplate__RenderFunc(props: {
  variants: PlasmicTemplate__VariantsArgs;
  args: PlasmicTemplate__ArgsType;
  overrides: PlasmicTemplate__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Navbar
        data-plasmic-name={"navbar"}
        data-plasmic-override={overrides.navbar}
        className={classNames("__wab_instance", sty.navbar)}
      />

      <Reveal
        data-plasmic-name={"reveal"}
        data-plasmic-override={overrides.reveal}
        cascade={false}
        className={classNames("__wab_instance", sty.reveal)}
        reverse={false}
        triggerOnce={true}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__aww1F)}
        />
      </Reveal>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___0LrKo)}
      >
        <PlasmicLink__
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link__tOu9
          )}
          component={Link}
          platform={"nextjs"}
        >
          {"Asset Credits"}
        </PlasmicLink__>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___2ReMi)}
      >
        <PlasmicLink__
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link__eTaY
          )}
          component={Link}
          platform={"nextjs"}
        >
          {"Showcase Photos"}
        </PlasmicLink__>
        {(() => {
          const child$Props = {
            arrows: false,
            autoplay: true,
            autoplaySpeed: 0,
            beforeChange: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "currentSlide",
                ["sliderCarousel", "currentSlide"],
                SliderWrapper_Helpers
              ).apply(null, eventArgs);
            },
            centerMode: true,
            className: classNames("__wab_instance", sty.sliderCarousel),
            cssEase: "linear",
            initialSlide: generateStateValueProp($state, [
              "sliderCarousel",
              "currentSlide"
            ]),
            ref: ref => {
              $refs["sliderCarousel"] = ref;
            },
            sliderScopeClassName: sty["sliderCarousel__slider"],
            slidesPerRow: 3,
            speed: 5000
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "currentSlide",
                plasmicStateName: "sliderCarousel.currentSlide"
              }
            ],
            [],
            SliderWrapper_Helpers ?? {},
            child$Props
          );

          return (
            <SliderWrapper
              data-plasmic-name={"sliderCarousel"}
              data-plasmic-override={overrides.sliderCarousel}
              {...child$Props}
            >
              <div className={classNames(projectcss.all, sty.freeBox__psCPb)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__xL5V5)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: "/plasmic/liz_website/images/vrChat20240114150442Png.png",
                    fullWidth: 338,
                    fullHeight: 601,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__v8Rl)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__sxRyp)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: "/plasmic/liz_website/images/vrChat20240114150223Png.png",
                    fullWidth: 338,
                    fullHeight: 601,
                    aspectRatio: undefined
                  }}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__xHb8Y)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img___6ZQy6)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={{
                    src: "/plasmic/liz_website/images/vrChat20240114150332Png.png",
                    fullWidth: 338,
                    fullHeight: 601,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </SliderWrapper>
          );
        })()}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "reveal", "sliderCarousel"],
  navbar: ["navbar"],
  reveal: ["reveal"],
  sliderCarousel: ["sliderCarousel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  reveal: typeof Reveal;
  sliderCarousel: typeof SliderWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTemplate__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTemplate__VariantsArgs;
    args?: PlasmicTemplate__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTemplate__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTemplate__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTemplate__ArgProps,
          internalVariantPropNames: PlasmicTemplate__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTemplate__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTemplate";
  } else {
    func.displayName = `PlasmicTemplate.${nodeName}`;
  }
  return func;
}

export const PlasmicTemplate = Object.assign(
  // Top-level PlasmicTemplate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    reveal: makeNodeComponent("reveal"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),

    // Metadata about props expected for PlasmicTemplate
    internalVariantProps: PlasmicTemplate__VariantProps,
    internalArgProps: PlasmicTemplate__ArgProps
  }
);

export default PlasmicTemplate;
/* prettier-ignore-end */
