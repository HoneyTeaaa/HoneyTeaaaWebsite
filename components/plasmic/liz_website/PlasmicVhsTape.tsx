// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pqbSBZb9VG36A9gA4GgWPg
// Component: voAPSAvZhi6l

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: pqbSBZb9VG36A9gA4GgWPg/projectcss
import sty from "./PlasmicVhsTape.module.css"; // plasmic-import: voAPSAvZhi6l/css

createPlasmicElementProxy;

export type PlasmicVhsTape__VariantMembers = {
  vhsOut: "vhsOut";
};
export type PlasmicVhsTape__VariantsArgs = {
  vhsOut?: SingleBooleanChoiceArg<"vhsOut">;
};
type VariantPropType = keyof PlasmicVhsTape__VariantsArgs;
export const PlasmicVhsTape__VariantProps = new Array<VariantPropType>(
  "vhsOut"
);

export type PlasmicVhsTape__ArgsType = {
  filmTitle?: string;
  year?: string;
  background?: React.ReactNode;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicVhsTape__ArgsType;
export const PlasmicVhsTape__ArgProps = new Array<ArgPropType>(
  "filmTitle",
  "year",
  "background",
  "children"
);

export type PlasmicVhsTape__OverridesType = {
  root?: Flex__<"div">;
  vhs?: Flex__<typeof PlasmicImg__>;
  vhs2?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultVhsTapeProps {
  filmTitle?: string;
  year?: string;
  background?: React.ReactNode;
  children?: React.ReactNode;
  vhsOut?: SingleBooleanChoiceArg<"vhsOut">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicVhsTape__RenderFunc(props: {
  variants: PlasmicVhsTape__VariantsArgs;
  args: PlasmicVhsTape__ArgsType;
  overrides: PlasmicVhsTape__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          filmTitle: "Film Title",
          year: "2025"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "vhsOut",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.vhsOut
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootvhsOut]: hasVariant($state, "vhsOut", "vhsOut") }
      )}
      onClick={async event => {
        const $steps = {};

        $steps["updateVhsOut"] = true
          ? (() => {
              const actionArgs = {
                vgroup: "vhsOut",
                operation: 2,
                value: "vhsOut"
              };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                const oldValue = $stateGet($state, vgroup);
                $stateSet($state, vgroup, !oldValue);
                return !oldValue;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateVhsOut"] != null &&
          typeof $steps["updateVhsOut"] === "object" &&
          typeof $steps["updateVhsOut"].then === "function"
        ) {
          $steps["updateVhsOut"] = await $steps["updateVhsOut"];
        }
      }}
    >
      <div className={classNames(projectcss.all, sty.freeBox__imIyb)}>
        <PlasmicImg__
          data-plasmic-name={"vhs"}
          data-plasmic-override={overrides.vhs}
          alt={""}
          className={classNames(sty.vhs, {
            [sty.vhsvhsOut]: hasVariant($state, "vhsOut", "vhsOut")
          })}
          displayHeight={"95%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: "/plasmic/liz_website/images/image13.png",
            fullWidth: 1366,
            fullHeight: 768,
            aspectRatio: undefined
          }}
        />

        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__kAhfO)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/liz_website/images/screenshot20250223170857Png.png",
                  fullWidth: 1558,
                  fullHeight: 985,
                  aspectRatio: undefined
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__cIjMf)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"100%"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/liz_website/images/image14.png",
                  fullWidth: 540,
                  fullHeight: 360,
                  aspectRatio: undefined
                }}
              />
            </React.Fragment>
          ),
          value: args.background
        })}
        <div className={classNames(projectcss.all, sty.freeBox__e70Xh)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uI7B
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.filmTitle;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "FILM TITLE";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iTse9
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.year;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "2025";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox___0OAxa, {
            [sty.freeBoxvhsOut___0OAxaKnnZ7]: hasVariant(
              $state,
              "vhsOut",
              "vhsOut"
            )
          })}
        >
          <PlasmicImg__
            data-plasmic-name={"vhs2"}
            data-plasmic-override={overrides.vhs2}
            alt={""}
            className={classNames(sty.vhs2, {
              [sty.vhs2vhsOut]: hasVariant($state, "vhsOut", "vhsOut")
            })}
            displayHeight={"95%"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: "/plasmic/liz_website/images/image13.png",
              fullWidth: 1366,
              fullHeight: 768,
              aspectRatio: undefined
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox__ggJzG)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__v0Tcn,
                {
                  [sty.textvhsOut__v0TcnKnnZ7]: hasVariant(
                    $state,
                    "vhsOut",
                    "vhsOut"
                  )
                }
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.filmTitle;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Credits:";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__alqr0,
                {
                  [sty.textvhsOut__alqr0KnnZ7]: hasVariant(
                    $state,
                    "vhsOut",
                    "vhsOut"
                  )
                }
              )}
            >
              {"Credits:"}
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__teOe, {
                [sty.freeBoxvhsOut__teOeKnnZ7]: hasVariant(
                  $state,
                  "vhsOut",
                  "vhsOut"
                )
              })}
            >
              {renderPlasmicSlot({
                defaultContents: "Directed by Liz  Manz",
                value: args.children,
                className: classNames(sty.slotTargetChildren, {
                  [sty.slotTargetChildrenvhsOut]: hasVariant(
                    $state,
                    "vhsOut",
                    "vhsOut"
                  )
                })
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "vhs", "vhs2"],
  vhs: ["vhs"],
  vhs2: ["vhs2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  vhs: typeof PlasmicImg__;
  vhs2: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVhsTape__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVhsTape__VariantsArgs;
    args?: PlasmicVhsTape__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicVhsTape__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicVhsTape__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicVhsTape__ArgProps,
          internalVariantPropNames: PlasmicVhsTape__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicVhsTape__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVhsTape";
  } else {
    func.displayName = `PlasmicVhsTape.${nodeName}`;
  }
  return func;
}

export const PlasmicVhsTape = Object.assign(
  // Top-level PlasmicVhsTape renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    vhs: makeNodeComponent("vhs"),
    vhs2: makeNodeComponent("vhs2"),

    // Metadata about props expected for PlasmicVhsTape
    internalVariantProps: PlasmicVhsTape__VariantProps,
    internalArgProps: PlasmicVhsTape__ArgProps
  }
);

export default PlasmicVhsTape;
/* prettier-ignore-end */
